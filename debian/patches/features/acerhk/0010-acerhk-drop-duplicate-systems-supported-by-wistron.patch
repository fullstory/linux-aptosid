From 60806152e3cc6064a95952620274a0dd2c0a9362 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Mon, 1 Jul 2013 02:23:33 +0200
Subject: [PATCH 10/65] acerhk: drop duplicate systems supported by wistron

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 467 +-----------------------------------------
 1 file changed, 8 insertions(+), 459 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -903,33 +903,6 @@ static void __init setup_keymap_model(un
 	acerhk_key2name[2] = k_setup;
 	/* then set known keycodes according to model */
 	switch (series) {
-	case 110:
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[3] = k_power;
-		acerhk_key2name[8] = k_mute;
-		acerhk_key2name[32] = k_volup;
-		acerhk_key2name[33] = k_voldn;
-		/* C110 generates 2 extra codes when opening/closing the lid */
-		acerhk_key2name[74] = k_close;
-		acerhk_key2name[75] = k_open;
-		break;
-	case 300:		/* treat C300 like C100 with Bluetooth button */
-		acerhk_key2name[68] = k_wireless2;
-	case 100:
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[49] = k_www;
-		acerhk_key2name[54] = k_mail;
-		acerhk_key2name[3] = k_power;
-		acerhk_key2name[8] = k_mute;
-		acerhk_key2name[32] = k_volup;
-		acerhk_key2name[33] = k_voldn;
-		break;
 	default:
 		/* only the two common keys are supported */
 		break;
@@ -939,112 +912,12 @@ static void __init setup_keymap_model(un
 		acerhk_key2name[17] = k_www;
 		acerhk_key2name[18] = k_mail;
 		break;
-	case 220:
-	case 260:		/* 260 with same keys? */
-		acerhk_key2name[49] = k_p1;
-		acerhk_key2name[19] = k_p2;
-		acerhk_key2name[18] = k_www;
-		acerhk_key2name[17] = k_mail;
-		break;
-	case 230:
-	case 280:		/* 280 with same keys? */
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[54] = k_www;
-		break;
-	case 1500:
-		acerhk_key2name[0x49] = k_setup;
-		acerhk_key2name[0x36] = k_www;
-		acerhk_key2name[0x31] = k_mail;
-		acerhk_key2name[0x11] = k_p1;
-		acerhk_key2name[0x12] = k_p2;
-		acerhk_key2name[0x30] = k_wireless;
-		acerhk_key2name[0x44] = k_wireless2;
-		acerhk_key2name[0x03] = k_power;
-		break;
-	case 240:
-		acerhk_key2name[0x31] = k_www;
-		acerhk_key2name[0x36] = k_mail;
-		acerhk_key2name[0x11] = k_p1;
-		acerhk_key2name[0x12] = k_p2;
-		acerhk_key2name[0x44] = k_wireless;
-		acerhk_key2name[0x30] = k_wireless2;
-		acerhk_key2name[0x03] = k_power;
-		acerhk_key2name[0x08] = k_mute;
-		//  acerhk_key2name[] = k_volup;
-		//  acerhk_key2name[] = k_voldn;
-		break;
-	case 2900:
-		acerhk_key2name[0x31] = k_mail;	/* with led */
-		acerhk_key2name[0x36] = k_www;
-		acerhk_key2name[0x11] = k_p1;
-		acerhk_key2name[0x12] = k_p2;
-		acerhk_key2name[0x30] = k_wireless;	/* wireless, with led, related with autowlan=1 */
-		break;
-	case 250:		/* enriqueg@altern.org */
-		/* TravelMate 254LMi_DT manual common for 240/250 series, but key order
-		   differ from 240 already present on acerhk driver */
-		/* TravelMate 254LMi_DT: 6 buttons: left to right: mail, www, p1, p2, bluetooth, wireless */
-		acerhk_key2name[0x31] = k_mail;	/* with led */
-		acerhk_key2name[0x36] = k_www;
-		acerhk_key2name[0x11] = k_p1;
-		acerhk_key2name[0x12] = k_p2;
-		acerhk_key2name[0x44] = k_wireless2;	/* bluetooth, hw optional */
-		acerhk_key2name[0x30] = k_wireless;	/* wireless, with led, related with autowlan=1 */
-		acerhk_key2name[0x03] = k_power;	/* Fn+F3 */
-		acerhk_key2name[0x08] = k_mute;	/* Fn+F8 */
-		break;
-	case 380:
-		/* TM 380 has same codes as TM 370, with an additional one */
-		acerhk_key2name[0x03] = k_power;
-	case 370:
-		acerhk_key2name[0x30] = k_wireless;
-		acerhk_key2name[0x11] = k_p1;
-		acerhk_key2name[0x12] = k_p2;
-		acerhk_key2name[0x13] = k_p3;
-		acerhk_key2name[0x36] = k_www;
-		acerhk_key2name[0x31] = k_mail;
-		break;
-	case 360:
-		/* 360 series has the same layout as 350, with an
-		   additional wireless key */
-		acerhk_key2name[64] = k_wireless;
-	case 350:
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[20] = k_p3;
-		acerhk_key2name[21] = k_www;
-		acerhk_key2name[19] = k_mail;
-		break;
 	case 520:
 		acerhk_key2name[19] = k_p1;
 		acerhk_key2name[20] = k_p2;
 		acerhk_key2name[17] = k_www;
 		acerhk_key2name[18] = k_mail;
 		break;
-	case 610:
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[19] = k_p3;
-		acerhk_key2name[21] = k_www;
-		acerhk_key2name[20] = k_mail;
-		acerhk_key2name[64] = k_wireless;
-		break;
-	case 630:
-		/* 630 has all keys of 620 plus one */
-		acerhk_key2name[8] = k_mute;
-	case 620:
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[19] = k_p3;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[3] = k_power;
-		acerhk_key2name[32] = k_volup;
-		acerhk_key2name[33] = k_voldn;
-		break;
 	case 290:
 	case 420:
 	case 430:
@@ -1102,73 +975,6 @@ static void __init setup_keymap_model(un
 		acerhk_key2name[1] = k_none;
 		acerhk_key2name[2] = k_none;
 		break;
-	case 1600:
-		/* Aspire 1600 has acer keycode 0x49 for FnF2 */
-		acerhk_key2name[73] = k_setup;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[19] = k_p3;
-		acerhk_key2name[3] = k_power;
-		acerhk_key2name[8] = k_mute;
-		/* VolUp and VolDown keys doesn't seem to be managed as special keys
-		   but as normal keys ! */
-		break;
-	case 5020:		/* Aspire 5020 has 0x6a for Fn+F2 */
-		acerhk_key2name[2] = k_none;
-		acerhk_key2name[106] = k_setup;
-		acerhk_key2name[3] = k_power;
-		acerhk_key2name[5] = k_display;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[68] = k_wireless2;
-		break;
-	case 2410:		/* TM 2410 is very similar to Aspire 5020, but has 0x6s for Fn-F3 */
-		acerhk_key2name[2] = k_none;
-		acerhk_key2name[106] = k_setup;
-		acerhk_key2name[109] = k_power;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[68] = k_wireless2;
-		break;
-	case 40100:
-		/* Medion MD40100, 4 keys */
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[55] = k_res;
-		break;
-	case 96500:
-	case 95400:
-		/* Medion MD95400, many keys */
-		acerhk_key2name[49] = k_mail;	/*  1 */
-		acerhk_key2name[54] = k_www;	/*  2 */
-		acerhk_key2name[48] = k_wireless;	/*  3 */
-		acerhk_key2name[68] = k_wireless2;	/*  4 (Bluetooth) */
-
-		acerhk_key2name[17] = k_p1;	/*  5 */
-		acerhk_key2name[18] = k_p2;	/*  6 */
-		acerhk_key2name[36] = k_play;	/*  7 */
-		acerhk_key2name[37] = k_stop;	/*  8 */
-		acerhk_key2name[34] = k_prev;	/*  9 */
-		acerhk_key2name[35] = k_next;	/* 10 */
-		acerhk_key2name[33] = k_voldn;	/* 11 */
-		acerhk_key2name[32] = k_volup;	/* 12 */
-		acerhk_key2name[38] = k_p3;	/* 13 */
-		acerhk_key2name[8] = k_mute;	/* 14 */
-
-		acerhk_key2name[1] = k_help;	/* FN+F1 (Help) */
-		acerhk_key2name[5] = k_display;	/* FN+F3 (Display switch) */
-		acerhk_key2name[6] = k_res;	/* FN+F4 (Display ein/ausschalten) */
-		break;
 	case 97600:
 		/* Medion MD97600, 7 keys, no setup */
 		acerhk_key2name[1] = k_help;	/* FN+F1 (Help) */
@@ -1180,54 +986,7 @@ static void __init setup_keymap_model(un
 		acerhk_key2name[19] = k_p3;
 		acerhk_key2name[48] = k_wireless;
 		break;
-	case 42200:
-		/* Medion MD42200, 7 keys, no setup */
-		acerhk_key2name[2] = k_none;
-		acerhk_key2name[5] = k_display;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		break;
-	case 9783:
-		/* Medion MD9783, 6 keys + info, no setup */
-		acerhk_key2name[2] = k_none;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[19] = k_p3;
-		acerhk_key2name[8] = k_mute;
-		break;
-	case 7400:
-		/* Amilo Pro V2000 does not have Help and Setup key (?)
-		   Amilo M 7400 has Help key, disabling only setup
-		 */
-		acerhk_key2name[2] = k_none;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		break;
-	case 1559:
-		acerhk_key2name[6] = k_display;	/* FN+F4 (Display ein/ausschalten) */
-	case 1555:
-		/* AOpen (Ahtec Signal 1555M) is similar to FS Amilo M */
-		acerhk_key2name[2] = k_none;
-		acerhk_key2name[48] = k_wireless;
-		acerhk_key2name[49] = k_mail;
-		acerhk_key2name[54] = k_www;
-		acerhk_key2name[17] = k_p1;
-		acerhk_key2name[18] = k_p2;
-		acerhk_key2name[34] = k_prev;
-		acerhk_key2name[35] = k_next;
-		acerhk_key2name[36] = k_play;
-		acerhk_key2name[37] = k_stop;
-		break;
 	case 6800:
-	case 7820:
 		/* Amilo D does not have Setup key */
 		acerhk_key2name[2] = k_none;
 		acerhk_key2name[49] = k_mail;
@@ -1266,18 +1025,6 @@ static void __init setup_model_features(
 		acerhk_model_features = 0;
 		acerhk_type = TM_old;
 		break;
-	case 220:
-	case 230:
-	case 260:
-	case 280:
-	case 360:
-	case 40100:		/* Medion MD40100 */
-	case 95400:		/* Medion MD95400 */
-	case 96500:		/* Medion MD96500 */
-		/* all special functions, no mail led */
-		acerhk_model_features = 0x00f00000;
-		acerhk_type = TM_new;
-		break;
 	case 97600:
 		/* has WLAN button */
 		/* The MD97600 seems to require TM_F_CONNECT at least
@@ -1286,58 +1033,12 @@ static void __init setup_model_features(
 		acerhk_model_features = TM_F_WBUTTON | TM_F_CONNECT;
 		acerhk_type = TM_new;
 		break;
-	case 42200:		/* Medion MD42200 */
-		/* has WLAN button, should call connect() */
-		acerhk_model_features = TM_F_WBUTTON | TM_F_CONNECT;
-		acerhk_type = TM_old;
-		break;
 	case 98200:		/* Medion MD98200 */
 		/* has WLAN button, should call connect() */
 		acerhk_model_features = TM_F_WBUTTON;
 		acerhk_type = TM_old;
 		break;
-	case 9783:		/* Medion MD9783 */
-		/* only email led */
-		acerhk_model_features = TM_F_MAIL_LED;
-		acerhk_type = TM_new;
-		break;
-	case 1600:
-		acerhk_type = TM_new;
-		/* Do Aspire 1600 series have special functions or not ? I enable
-		   them, perhaps it helps with problems Francois Valenduc has */
-		acerhk_model_features = 0x00f00000;
-		break;
-	case 300:
-	case 100:
-	case 110:
-	case 240:
-	case 350:
-	case 610:
-	case 620:
-	case 630:
-		/* all special functions, mail led */
-		acerhk_model_features = TM_F_MAIL_LED | 0x00f00000;
-		acerhk_type = TM_new;
-		break;
-	case 370:
-	case 380:
-	case 2410:
-	case 2900:		/* Medion MD2900 */
-	case 2100:		/* TM 2100 uses same driver as 5020 */
-	case 5020:		/* Aspire 5020 is still old hardware */
-		acerhk_model_features =
-		    TM_F_MAIL_LED | TM_F_CONNECT | TM_F_WBUTTON;
-		acerhk_type = TM_new;
-		break;
-	case 7400:
-	case 1555:
-	case 1559:
-		/* all special functions for Fujitsu-Siemens Amilo M7400, Pro V2000; AOpen */
-		acerhk_model_features = 0x00f00000;
-		acerhk_type = TM_new;
-		break;
 	case 6800:
-	case 7820:
 		/* mail led and all special functions for FS Amilo D */
 		acerhk_model_features = TM_F_MAIL_LED | 0x00f00000;
 		acerhk_type = TM_new;
@@ -1392,11 +1093,6 @@ static void __init setup_model_features(
 		acerhk_model_features = TM_F_MAIL_LED_EC3 | TM_F_WBUTTON;
 		acerhk_type = TM_dritek;
 		break;
-	case 1500:
-		/* Bluetooth/Wlan led */
-		acerhk_model_features = TM_F_WBUTTON;
-		acerhk_type = TM_new;
-		break;
 	case 420:
 	case 430:
 		/* all functions and dritek EC, mail LED is handled by EC, second
@@ -1450,12 +1146,6 @@ static void __init setup_model_features(
 		    TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
 		acerhk_wlan_state = 1;	// Default state is on
 		break;
-	case 250:		/* enriqueg@altern.org */
-		/* TravelMate254LMi_DT : mail led, bluetooth (button present, hw optional), wifi (with led) */
-		acerhk_model_features = TM_F_MAIL_LED | TM_F_WBUTTON;
-		acerhk_type = TM_new;
-		acerhk_wlan_state = 0;	//Initial state is off on 254LMi_DT
-		break;
 	default:
 		/* nothing special */
 		acerhk_model_features = 0;
@@ -1488,31 +1178,6 @@ static unsigned int __init determine_lap
 	unsigned int series = 0;
 	if (strncmp(str, "TravelMate ", 11) == 0) {
 		switch (str[11]) {
-		case 'C':
-			if (str[12] == '1') {
-				if (str[13] == '0') {
-					if (verbose > 1)
-						printk(KERN_INFO
-						       "acerhk: model string indicates TM C100 series\n");
-					series = 100;
-				} else if (str[13] == '1') {
-					if (verbose > 1)
-						printk(KERN_INFO
-						       "acerhk: model string indicates TM C110 series\n");
-					series = 110;
-				}
-			} else if (str[12] == '3') {
-				if (verbose > 1)
-					printk(KERN_INFO
-					       "acerhk: model string indicates TM C300 series\n");
-				series = 300;
-			}
-			break;
-		case 'F':
-			if (str[12] == '4') {
-				series = 230;
-			}
-			break;
 		case '2':
 			if (str[14] == '0') {
 				/* newer Travelmate 2xxx series */
@@ -1521,10 +1186,6 @@ static unsigned int __init determine_lap
 				case '5':
 					series = 2000;	// 2000 and 2500 are the same
 					break;
-				case '1':
-					if (str[13] == '0')
-						series = 2100;
-					break;
 				case '2':
 				case '7':
 					series = 2200;	// 2200 and 2700 are the same
@@ -1535,10 +1196,6 @@ static unsigned int __init determine_lap
 					else if (str[13] == '5')
 						series = 4050;	// 2350 is the same as 4050
 					break;
-				case '4':
-					if (str[13] == '1')
-						series = 2410;
-					break;
 				default:
 					if (verbose > 1)
 						printk(KERN_INFO
@@ -1554,18 +1211,6 @@ static unsigned int __init determine_lap
 				case '1':
 					series = 210;
 					break;
-				case '2':
-					series = 220;
-					break;
-				case '4':
-					series = 240;
-					break;
-				case '5':
-					series = 250;
-					break;	/* enriqueg@altern.org */
-				case '6':
-					series = 260;
-					break;
 				default:
 					if (verbose > 1)
 						printk(KERN_INFO
@@ -1580,18 +1225,6 @@ static unsigned int __init determine_lap
 				series = 3200;
 				break;	/* TM 3000 works like TM 3200 */
 				/* Travelmate 3xx series */
-			case '5':
-				series = 350;
-				break;
-			case '6':
-				series = 360;
-				break;
-			case '7':
-				series = 370;
-				break;
-			case '8':
-				series = 380;
-				break;
 			default:
 				if (verbose > 1)
 					printk(KERN_INFO
@@ -1641,15 +1274,6 @@ static unsigned int __init determine_lap
 			break;
 		case '6':	/* older Travelmate 6xx series */
 			switch (str[12]) {
-			case '1':
-				series = 610;
-				break;
-			case '2':
-				series = 620;
-				break;
-			case '3':
-				series = 630;
-				break;
 			default:
 				if (verbose > 1)
 					printk(KERN_INFO
@@ -1796,14 +1420,8 @@ static unsigned int __init determine_lap
 					break;
 				}
 				break;
-			case '5':
-				series = 1500;
-				break;
 			case '6':	/* Aspire 14xx series */
 				switch (str[9]) {
-				case '0':
-					series = 1600;
-					break;
 				case '8':
 				case '9':
 					series = 1680;
@@ -1860,9 +1478,6 @@ static unsigned int __init determine_lap
 						printk(KERN_INFO
 						       "acerhk: model string indicates unknown Aspire 30xx series\n");
 					break;
-				case '2':
-					series = 5020;
-					break;	/* Aspire 3020/5020 are identical */
 				}
 			} else {
 				if (verbose > 1)
@@ -1878,9 +1493,6 @@ static unsigned int __init determine_lap
 						printk(KERN_INFO
 						       "acerhk: model string indicates unknown Aspire 50xx series\n");
 					break;
-				case '2':
-					series = 5020;
-					break;
 				}
 			} else if (str[8] == '1' && str[9] == '0') {
 				series = 5100;
@@ -1924,18 +1536,10 @@ static unsigned int __init determine_lap
 			       "acerhk: model string indicates unknown Extensa series\n");
 	} else if (strncmp(str, "Amilo ", 6) == 0) {
 		switch (str[6]) {
-		case 'D':	/* complete string is "Amilo D-Series", there seems to be no model number */
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates FS Amilo D series\n");
-			/* this is the model number of my Amilo */
-			series = 7820;
-			break;
 		default:
 			if (verbose > 1)
 				printk(KERN_INFO
 				       "acerhk: model string indicates unknown FS Amilo XX series\n");
-			series = 7820;
 		}
 	} else if (strncmp(str, "AMILO ", 6) == 0) {
 		switch (str[6]) {
@@ -1945,19 +1549,6 @@ static unsigned int __init determine_lap
 				       "acerhk: model string indicates FS AMILO D series\n");
 			series = 6800;
 			break;
-		case 'M':
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates FS AMILO M(7400) series\n");
-			series = 7400;
-			break;
-		case 'P':
-			/* it is assumed, that 'AMILO P' appears only on Amilo Pro Series */
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates FS AMILO Pro (V2000) series\n");
-			series = 7400;
-			break;
 		case 'A':	/* AMILO Axxxx - added by damagedspline@aim.com */
 			switch (str[7]) {
 			case '1':	/* AMILO A1xxx */
@@ -1982,49 +1573,15 @@ static unsigned int __init determine_lap
 			       "acerhk: found Medion model string:'%s'\n",
 			       (char *)reg1 + medionmodel);
 			series = 97600;
-		} else
-		    if ((medionmodel =
-			 COLUSSI("WIM 2040", 4, reg1, AREA_SIZE)) >= 0) {
-			printk(KERN_INFO
-			       "acerhk: found Medion model string:'%s'\n",
-			       (char *)reg1 + medionmodel);
-			series = 96500;
-		} else {
-			if ((medionmodel =
-			     COLUSSI("MD 9", 4, reg1, AREA_SIZE)) >= 0) {
-				printk(KERN_INFO
-				       "acerhk: found Medion model string:'%s'\n",
-				       (char *)reg1 + medionmodel);
-			}
-			series = 95400;
 		}
 		if (verbose > 1)
 			printk(KERN_INFO
 			       "acerhk: model string indicates a medion MD %d\n",
 			       series);
 	} else if (strncmp(str, "MEDIONNB", 8) == 0) {
-		/* Search for the Product string of the MD9783. */
-		if (COLUSSI("MD 42200", 8, reg1, AREA_SIZE) >= 0) {
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates a Medion MD 42200\n");
-			series = 42200;
-		} else if (COLUSSI("MD 9783", 7, reg1, AREA_SIZE) >= 0) {
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates a medion MD 9783\n");
-			series = 9783;
-		} else if (COLUSSI("WIM 2000", 7, reg1, AREA_SIZE) >= 0) {
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates a Medion MD 2900\n");
-			series = 2900;
-		} else {
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates a medion MD40100\n");
-			series = 40100;
-		}
+		if (verbose > 1)
+			printk(KERN_INFO
+			       "acerhk: model string indicates no supported Medion hardware\n");
 	} else if (strncmp(str, "MEDION", 6) == 0) {
 		if (COLUSSI("WIM2120", 7, reg1, AREA_SIZE) >= 0) {
 			if (verbose > 1)
@@ -2033,19 +1590,11 @@ static unsigned int __init determine_lap
 			series = 98200;
 		}
 	} else if (strncmp(str, "AOpen", 5) == 0) {
-		if (strncmp(str, "AOpen*EzRestore", 15) == 0) {
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates a AOpen 1559\n");
-			series = 1559;
-		} else {
-			/* Unless I know of other models no further differentiation,
-			   although there is a second part of the model string */
-			if (verbose > 1)
-				printk(KERN_INFO
-				       "acerhk: model string indicates a AOpen\n");
-			series = 1555;
-		}
+		/* Unless I know of other models no further differentiation,
+		   although there is a second part of the model string */
+		if (verbose > 1)
+			printk(KERN_INFO
+			       "acerhk: model string indicates a AOpen\n");
 	} else if (strncmp(str, "CL56", 4) == 0) {
 		/* Unless I know of other models no further differentiation,
 		   although there are strings with more numbers ("CL561" on a Compal
