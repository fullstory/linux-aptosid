From d0374c1f412a3a6774928a5af6040c03aecec332 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Wed, 14 Aug 2013 18:55:57 +0200
Subject: [PATCH 51/65] acerhk: split out common parts of the DMI callbacks
 into a helper function

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 88 +++++++++++++++++--------------------------
 1 file changed, 35 insertions(+), 53 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -1237,10 +1237,17 @@ static void model_init(void)
 }
 #endif
 
-static int __init dmi_check_cb_aspire_1300(const struct dmi_system_id *id)
+static void __init dmi_check_cb_common(const struct dmi_system_id *id, bool untested)
 {
 	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+
+	if (untested)
+		pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+}
+
+static int __init dmi_check_cb_aspire_1300(const struct dmi_system_id *id)
+{
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, wireless hardware can be controlled */
 	acerhk_model_features = 0x00f00000;
@@ -1250,8 +1257,7 @@ static int __init dmi_check_cb_aspire_13
 
 static int __init dmi_check_cb_aspire_1310(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, wireless hardware can be controlled */
 	acerhk_model_features = 0x00f00000;
@@ -1261,8 +1267,7 @@ static int __init dmi_check_cb_aspire_13
 
 static int __init dmi_check_cb_aspire_1350(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* mail led, handled by EC, wireless HW is not (yet) controllable? */
 	acerhk_model_features = TM_F_MAIL_LED_EC | TM_F_WLAN_EC1;
@@ -1272,8 +1277,7 @@ static int __init dmi_check_cb_aspire_13
 
 static int __init dmi_check_cb_aspire_1360(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* mail led, handled by EC, wireless HW is not (yet) controllable? */
 	acerhk_model_features = TM_F_MAIL_LED_EC | TM_F_WLAN_EC1;
@@ -1283,8 +1287,7 @@ static int __init dmi_check_cb_aspire_13
 
 static int __init dmi_check_cb_aspire_1400(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, wireless hardware can be controlled */
 	acerhk_model_features = 0x00f00000;
@@ -1294,8 +1297,7 @@ static int __init dmi_check_cb_aspire_14
 
 static int __init dmi_check_cb_aspire_1450(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* Bluetooth/Wlan led, Mail led handled by EC (variant 3) */
 	acerhk_model_features = TM_F_MAIL_LED_EC3 | TM_F_WBUTTON;
@@ -1305,8 +1307,7 @@ static int __init dmi_check_cb_aspire_14
 
 static int __init dmi_check_cb_aspire_1800(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* Dritek EC, bluetooth, wifi, mail */
 	acerhk_model_features = TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1319,8 +1320,7 @@ static int __init dmi_check_cb_aspire_18
 
 static int __init dmi_check_cb_aspire_2000(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* No features (?) dritek EC, mail LED is handled by EC but
 	   different from other Aspire series */
@@ -1331,8 +1331,7 @@ static int __init dmi_check_cb_aspire_20
 
 static int __init dmi_check_cb_aspire_2010(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* Dritek EC, bluetooth, wifi, mail */
 	acerhk_model_features = TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1345,8 +1344,7 @@ static int __init dmi_check_cb_aspire_20
 
 static int __init dmi_check_cb_aspire_2020(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* Dritek EC, bluetooth, wifi, mail */
 	acerhk_model_features = TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1359,8 +1357,7 @@ static int __init dmi_check_cb_aspire_20
 
 static int __init dmi_check_cb_aspire_4150(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* Dritek EC, bluetooth, wifi, mail */
 	acerhk_model_features = TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1370,8 +1367,7 @@ static int __init dmi_check_cb_aspire_41
 
 static int __init dmi_check_cb_aspire_4650(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* Dritek EC, bluetooth, wifi, mail */
 	/* According to Andreas Stumpfl his TM 4652LMi does also work
@@ -1384,7 +1380,7 @@ static int __init dmi_check_cb_aspire_46
 
 static int __init dmi_check_cb_travelmate_290(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
+	dmi_check_cb_common(id, false);
 
 	/* no special functions, wireless hardware controlled by EC */
 	acerhk_model_features = TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1394,8 +1390,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_420(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all functions and dritek EC, mail LED is handled by EC,
 	 * second variant. An additional led is available, mute.
@@ -1408,8 +1403,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_430(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all functions and dritek EC, mail LED is handled by EC,
 	 * second variant. An additional led is available, mute.
@@ -1422,8 +1416,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_530(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* No features(?) dritek EC, mail LED is handled by EC but
 	   different from other Aspire series */
@@ -1434,8 +1427,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_540(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* No features(?) dritek EC, mail LED is handled by EC but
 	   different from other Aspire series */
@@ -1446,8 +1438,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_650(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, wireless hardware can be controlled */
 	acerhk_model_features = 0x00f00000;
@@ -1457,8 +1448,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_660(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, mail led */
 	acerhk_model_features = TM_F_MAIL_LED | 0x00f00000;
@@ -1468,8 +1458,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_800(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, mail led */
 	acerhk_model_features = TM_F_MAIL_LED | 0x00f00000;
@@ -1479,8 +1468,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_1700(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* all special functions, wireless hardware can be controlled */
 	acerhk_model_features = 0x00f00000;
@@ -1490,8 +1478,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_2300(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* wireless hardware, hopefully under control of my driver */
 	acerhk_model_features = TM_F_BLUE_EC1 | TM_F_WLAN_EC1;
@@ -1501,8 +1488,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_2350(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* no special functions, wireless hardware controlled by EC */
 	acerhk_model_features = TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1515,8 +1501,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_3200(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* test, if this model uses old style wlan control */
 	acerhk_model_features = TM_F_WBUTTON;
@@ -1526,8 +1511,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_4000(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* wireless hardware, hopefully under control of my driver */
 	acerhk_model_features = TM_F_BLUE_EC1 | TM_F_WLAN_EC1;
@@ -1537,8 +1521,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_4050(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* no special functions, wireless hardware controlled by EC */
 	acerhk_model_features = TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -1551,8 +1534,7 @@ static int __init dmi_check_cb_travelmat
 
 static int __init dmi_check_cb_travelmate_4500(const struct dmi_system_id *id)
 {
-	pr_info("Identified notebook model: '%s'\n", id->ident);
-	pr_warn("Untested device, please report success or failure to the module maintainer.\n");
+	dmi_check_cb_common(id, true);
 
 	/* wireless hardware, hopefully under control of my driver */
 	acerhk_model_features = TM_F_BLUE_EC1 | TM_F_WLAN_EC1;
