From f8cdfb81fb6d34a94355550b8637179b12feb706 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Mon, 1 Jul 2013 02:29:18 +0200
Subject: [PATCH 23/65] acerhk: fix whitespace

make checkpatch.pl happy

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 305 ++++++++++++++++++++++++++++++------------
 1 file changed, 217 insertions(+), 88 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -62,15 +62,18 @@
 
 #include "acerhk.h"
 
-/* maximum number of polling loops, adjust it if needed to values between
+/*
+ * maximum number of polling loops, adjust it if needed to values between
  * 1 and 32
  */
 #define MAX_POLLING_LOOPS 16U
 
 /* maximum length for model string */
 #define ACERHK_MODEL_STRLEN 16
+
 /* size of mapped areas */
 #define AREA_SIZE 0xffff
+
 /* needed for colussi algorithm */
 #define XSIZE     20
 
@@ -81,12 +84,14 @@ static int wlan_state = -1;
 static int bluetooth_state = -1;
 static int verbose;
 static unsigned int force_series;
+
 module_param(poll, int, 0444);
 module_param(autowlan, int, 0444);
 module_param(verbose, int, 0444);
 module_param(wlan_state, int, 0444);
 module_param(bluetooth_state, int, 0444);
 module_param(force_series, uint, 0444);
+
 MODULE_PARM_DESC(poll, "start polling timer");
 MODULE_PARM_DESC(autowlan, "automatic switching of wlan hardware");
 MODULE_PARM_DESC(wlan_state, "(assumed) initial state of WLAN LED/hardware");
@@ -103,46 +108,64 @@ static struct input_dev acerhk_input_dev
 
 /* mapped IO area from 0xf0000 */
 static void *reg1;
+
 /* mapped IO area from 0xe0000 */
 static void *reg2;
+
 /* location of IO routine in mapped area */
 static unsigned int bios_routine;
+
 /* index of CMOS port to get key event */
 static unsigned int cmos_index;
+
 /* function for bios call */
 static bios_call call_bios;
+
 /* address of model string */
 static char *acerhk_model_addr;
+
 /* copied string, maximum length 16 ('TravelMate xxx') */
 static char acerhk_model_string[ACERHK_MODEL_STRLEN];
+
 /* travelmate series  */
 static unsigned int acerhk_series;
+
 /* supported features for this model */
 static unsigned int acerhk_model_features;
+
 /* map of acer key codes to acer key names */
 static unsigned char acerhk_key2name[0xff];
+
 /* map of acer key names to key events */
 static t_map_name2event acerhk_name2event;
+
 /* timer for polling key presses */
 static struct timer_list acerhk_timer_poll;
+
 /* polling active */
 static int acerhk_polling_state;
+
 /* polling delay */
 static unsigned acerhk_polling_delay = HZ / 5;
+
 /* wlan hardware toggle */
 static int acerhk_wlan_state;
+
 /* bluetooth hardware toggle */
 static int acerhk_bluetooth_state;
 
-/* bluetooth blinking state; added by Antonio Cuni
-   possible values:
-      -1: blinking disabled (default)
-       0: blinking enabled, led currently off
-       1: blinking enabled, led currently on
-*/
+/*
+ * bluetooth blinking state; added by Antonio Cuni
+ * possible values:
+ *    -1: blinking disabled (default)
+ *      0: blinking enabled, led currently off
+ *      1: blinking enabled, led currently on
+ */
 static int acerhk_blueled_blinking = -1;
+
 /* delay between two changes of state, in jiffies */
 static unsigned acerhk_blueled_blinking_delay;
+
 /* timer for blinking */
 static struct timer_list acerhk_timer_blinking;
 
@@ -156,9 +179,9 @@ static void stop_blinking(void);
 
 /* {{{ Experimental use of dritek keyboard extension */
 
-#define EC_STATUS_REG		0x66	/* Status register of EC (R) */
-#define EC_CNTL_REG		    0x66	/* Controller command register of EC (W) */
-#define EC_DATA_REG		    0x62	/* EC data register (R/W) */
+#define EC_STATUS_REG		0x66 /* Status register of EC (R) */
+#define EC_CNTL_REG		0x66 /* Controller command register of EC (W) */
+#define EC_DATA_REG		0x62 /* EC data register (R/W) */
 
 
 #include <linux/preempt.h>
@@ -176,10 +199,12 @@ static inline int my_i8042_read_status(v
 static int my_i8042_wait_write(void)
 {
 	int i = 0;
+
 	while ((my_i8042_read_status() & 0x02) && (i < 10000)) {
 		udelay(50);
 		i++;
 	}
+
 	return -(i == 10000);
 }
 
@@ -188,6 +213,7 @@ static void send_kbd_cmd(unsigned char c
 	preempt_disable();
 	if (!my_i8042_wait_write())
 		outb(cmd, KBD_CNTL_REG);
+
 	if (!my_i8042_wait_write())
 		outb(val, KBD_DATA_REG);
 	preempt_enable_no_resched();
@@ -352,6 +378,7 @@ int preColussi(char *x, int m, int *h, i
 {
 	int i, k, nd, q, r, s;
 	int hmax[XSIZE], kmin[XSIZE], nhd0[XSIZE], rmin[XSIZE];
+
 	/* Computation of hmax */
 	i = k = 1;
 	do {
@@ -366,12 +393,16 @@ int preColussi(char *x, int m, int *h, i
 		k = q;
 		if (k == i + 1)
 			i = k;
-	} while (k <= m);	/* Computation of kmin */
+	} while (k <= m);
+
+	/* Computation of kmin */
 	memset(kmin, 0, m * sizeof(int));
 	r = 0;
 	for (i = m; i >= 1; --i)
 		if (hmax[i] < m)
-			kmin[hmax[i]] = i;	/* Computation of rmin */
+			kmin[hmax[i]] = i;
+
+	/* Computation of rmin */
 	for (i = m - 1; i >= 0; --i) {
 		if (hmax[i + 1] == m)
 			r = i + 1;
@@ -379,7 +410,9 @@ int preColussi(char *x, int m, int *h, i
 			rmin[i] = r;
 		else
 			rmin[i] = 0;
-	}			/* Computation of h */
+	}
+
+	/* Computation of h */
 	s = -1;
 	r = m;
 	for (i = 0; i < m; ++i)
@@ -387,34 +420,51 @@ int preColussi(char *x, int m, int *h, i
 			h[--r] = i;
 		else
 			h[++s] = i;
-	nd = s;			/* Computation of shift */
+	nd = s;
+
+	/* Computation of shift */
 	for (i = 0; i <= nd; ++i)
 		shift[i] = kmin[h[i]];
+
 	for (i = nd + 1; i < m; ++i)
 		shift[i] = rmin[h[i]];
-	shift[m] = rmin[0];	/* Computation of nhd0 */
+
+	shift[m] = rmin[0];
+
+	/* Computation of nhd0 */
 	s = 0;
 	for (i = 0; i < m; ++i) {
 		nhd0[i] = s;
 		if (kmin[i] > 0)
 			++s;
-	}			/* Computation of next */
+	}
+
+	/* Computation of next */
 	for (i = 0; i <= nd; ++i)
 		next[i] = nhd0[h[i] - kmin[h[i]]];
+
 	for (i = nd + 1; i < m; ++i)
 		next[i] = nhd0[m - rmin[h[i]]];
 	next[m] = nhd0[m - rmin[h[m - 1]]];
-	return (nd);
+
+	return nd;
 }
 
 int COLUSSI(char *x, int m, char *y, int n)
 {
-	int i, j, last, nd, h[XSIZE], next[XSIZE], shift[XSIZE];	/* Processing */
-	int match_pos;		/* position of first match */
-	nd = preColussi(x, m, h, next, shift);	/* Searching */
+	int i, j, last, nd, h[XSIZE], next[XSIZE], shift[XSIZE];
+
+	/* Processing */
+	int match_pos;
+
+	/* position of first match */
+	nd = preColussi(x, m, h, next, shift);
+
+	/* Searching */
 	i = j = 0;
 	last = -1;
 	match_pos = -1;
+
 	while ((match_pos == -1)
 	       && (j <= n - m)) {
 		while (i < m && last < j + h[i] && x[h[i]] == y[j + h[i]])
@@ -429,6 +479,7 @@ int COLUSSI(char *x, int m, char *y, int
 		j += shift[i];
 		i = next[i];
 	}
+
 	return match_pos;
 }
 
@@ -466,8 +517,8 @@ static asmlinkage void call_bios_6xx(str
 				     "movl %%edx, 12(%%ebp)\n\t"
 				     "movl %%edi, 16(%%ebp)\n\t"
 				     "movl %%esi, 20(%%ebp)\n\t"
-				     "popa\n\t"::"m"(bios_routine), "m"(buf)
-				     :"%eax", "%ebx", "%ecx", "%edx", "%edi",
+				     "popa\n\t" : : "m"(bios_routine), "m"(buf)
+				     : "%eax", "%ebx", "%ecx", "%edx", "%edi",
 				     "%esi", "%ebp");
 		local_irq_enable();
 	}
@@ -485,12 +536,15 @@ static int get_fnkey_event(void)
 	struct register_buffer regs;
 	regs.eax = 0x9610;
 	regs.ebx = 0x61C;
+
 	/* clear other registers, some models need this */
 	regs.ecx = 0;
 	regs.edx = 0;
+
 	preempt_disable();
 	call_bios(&regs);
 	preempt_enable_no_resched();
+
 	return regs.eax & 0xffff;
 }
 
@@ -506,6 +560,7 @@ static int get_thermal_event(void)
 	if (acerhk_model_features & TM_F_THERMAL) {
 		regs.eax = 0x9612;
 		regs.ebx = 0x12e;
+
 		preempt_disable();
 		call_bios(&regs);
 		preempt_enable_no_resched();
@@ -518,6 +573,7 @@ static int get_thermal_event(void)
 		if (verbose > 3)
 			pr_info("thermal event not supported\n");
 	}
+
 	return regs.eax & 0xffff;
 }
 
@@ -534,6 +590,7 @@ static int get_thermal_event(void)
 static int wbutton_fct_1(int val)
 {
 	struct register_buffer regs;
+
 	if (acerhk_model_features & TM_F_WBUTTON) {
 		acerhk_bluetooth_state = val;
 		regs.eax = 0x9610;
@@ -551,6 +608,7 @@ static int wbutton_fct_1(int val)
 
 		regs.eax = 0x00;
 	}
+
 	return regs.eax & 0xffff;
 }
 
@@ -566,6 +624,7 @@ static int wbutton_fct_1(int val)
 static int wbutton_fct_2(int val)
 {
 	struct register_buffer regs;
+
 	if (acerhk_model_features & TM_F_WBUTTON) {
 		acerhk_wlan_state = val;
 		regs.eax = 0x9610;
@@ -607,6 +666,7 @@ static int get_nr_events(void)
 		pr_info("get_nr_events - no valid cmos index set\n");
 #endif
 	spin_unlock_irqrestore(&rtc_lock, flags);
+
 	return c;
 }
 
@@ -623,6 +683,7 @@ static int get_nr_events(void)
 static int set_mail_led(int val)
 {
 	struct register_buffer regs;
+
 	if (acerhk_model_features & TM_F_MAIL_LED) {
 		regs.eax = 0x9610;
 		regs.ebx = ((val & 0xff) << 8) | 0x31;
@@ -699,7 +760,9 @@ static unsigned long __init find_hk_area
 	long offset, sig;
 	unsigned int fkt;
 	fkt = 0;
-	sig = -1;		/* offset to signature in io area */
+
+	/* offset to signature in io area */
+	sig = -1;
 
 	/* Look for signature, start at 0xf0000, search until 0xffff0 */
 	for (offset = 0; offset < 0xfffd; offset += 16) {
@@ -714,6 +777,7 @@ static unsigned long __init find_hk_area
 	else {
 		/* compute location of bios routine */
 		fkt = readl(reg1 + sig + 5);
+
 		/* adjust fkt to address of mapped IO area */
 		if (fkt >= 0xf0000)
 			fkt = (unsigned long)reg1 + fkt - 0xf0000;
@@ -722,6 +786,7 @@ static unsigned long __init find_hk_area
 		else
 			fkt = 0;
 	}
+
 	return fkt;
 }
 #endif
@@ -870,7 +935,8 @@ static void __init setup_model_features(
 	switch (series) {
 	case 2350:
 	case 4050:
-		acerhk_wlan_state = 1;	// Default state is on
+		/* Default state is on */
+		acerhk_wlan_state = 1;
 	case 290:
 		/* no special functions, wireless hardware controlled by EC */
 		acerhk_model_features = TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
@@ -890,7 +956,8 @@ static void __init setup_model_features(
 		break;
 	case 1350:
 	case 1360:
-		/* mail led, handled by EC, wireless HW is not (yet) controllable ? */
+		/* mail led, handled by EC, wireless HW is not (yet)
+		 * controllable? */
 		acerhk_model_features = TM_F_MAIL_LED_EC | TM_F_WLAN_EC1;
 		break;
 	case 1450:
@@ -899,8 +966,9 @@ static void __init setup_model_features(
 		break;
 	case 420:
 	case 430:
-		/* all functions and dritek EC, mail LED is handled by EC, second
-		   variant. An additional led is available, mute. (really?)
+		/* all functions and dritek EC, mail LED is handled by EC,
+		 * second variant. An additional led is available, mute.
+		 * (really?)
 		 */
 		acerhk_model_features = TM_F_MUTE_LED_EC | TM_F_MAIL_LED_EC2;
 		break;
@@ -916,8 +984,8 @@ static void __init setup_model_features(
 		break;
 	case 6000:
 	case 8000:
-		/* 6000 and 8000 have wireless hardware, but I don't know how to handle,
-		   so I choose no features */
+		/* 6000 and 8000 have wireless hardware, but I don't know how
+		 * to handle, so I choose no features */
 		break;
 	case 530:
 	case 540:
@@ -929,8 +997,9 @@ static void __init setup_model_features(
 	case 4150:
 	case 4650:
 		/* Dritek EC, bluetooth, wifi, mail */
-		/* According to Andreas Stumpfl his TM 4652LMi does also work as series
-		   3200, which might mean that the BIOS function accesses the EC */
+		/* According to Andreas Stumpfl his TM 4652LMi does also work
+		 * as series 3200, which might mean that the BIOS function
+		 * accesses the EC */
 		acerhk_model_features =
 		    TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
 		break;
@@ -941,13 +1010,16 @@ static void __init setup_model_features(
 		/* Dritek EC, bluetooth, wifi, mail */
 		acerhk_model_features =
 		    TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
-		acerhk_wlan_state = 1;	// Default state is on
+
+		/* Default state is on */
+		acerhk_wlan_state = 1;
 		break;
 	default:
 		/* nothing special */
 		acerhk_model_features = 0;
 		break;
 	}
+
 	/* set the correct bios call function according to type */
 	call_bios = call_bios_6xx;
 
@@ -969,6 +1041,7 @@ static unsigned int __init determine_lap
 {
 	/* 0 means unknown series, handled like TM 200 */
 	unsigned int series = 0;
+
 	if (strncmp(str, "TravelMate ", 11) == 0) {
 		switch (str[11]) {
 		case '2':
@@ -977,17 +1050,21 @@ static unsigned int __init determine_lap
 				switch (str[12]) {
 				case '0':
 				case '5':
-					series = 2000;	// 2000 and 2500 are the same
+					/* 2000 and 2500 are the same */
+					series = 2000;
 					break;
 				case '2':
 				case '7':
-					series = 2200;	// 2200 and 2700 are the same
+					/* 2200 and 2700 are the same */
+					series = 2200;
 					break;
 				case '3':
 					if (str[13] == '0')
-						series = 4000;	// 2300 is the same as 4000
+						/* 2300 is the same as 4000 */
+						series = 4000;
 					else if (str[13] == '5')
-						series = 4050;	// 2350 is the same as 4050
+						/* 2350 is the same as 4050 */
+						series = 4050;
 					break;
 				default:
 					if (verbose > 1)
@@ -997,11 +1074,12 @@ static unsigned int __init determine_lap
 			}
 			break;
 		case '3':
+			/* Travelmate 3xxx series */
 			switch (str[12]) {
 			case '0':
+				/* TM 3000 works like TM 3200 */
 				series = 3200;
-				break;	/* TM 3000 works like TM 3200 */
-				/* Travelmate 3xx series */
+				break;
 			default:
 				if (verbose > 1)
 					pr_info("model string indicates unknown TM 3xx series\n");
@@ -1009,10 +1087,13 @@ static unsigned int __init determine_lap
 			}
 			break;
 		case '4':
-			if ((strnlen(str, ACERHK_MODEL_STRLEN - 1) == 15) && (str[14] == '0')) {	/* Travelmate 4xxx series */
+			/* Travelmate 4xxx series */
+			if ((strnlen(str, ACERHK_MODEL_STRLEN - 1) == 15) &&
+			    (str[14] == '0')) {
 				switch (str[12]) {
-				case '0':	/* 4000 and 4500 are the same */
+				case '0':
 				case '5':
+					/* 4000 and 4500 are the same */
 					series = 4000;
 					break;
 				default:
@@ -1020,7 +1101,8 @@ static unsigned int __init determine_lap
 						pr_info("model string indicates unknown TM 4xxx series\n");
 					break;
 				}
-			} else {	/* Travelmate 4xx series */
+			} else {
+				/* Travelmate 4xx series */
 				switch (str[12]) {
 				case '2':
 					series = 420;
@@ -1043,9 +1125,9 @@ static unsigned int __init determine_lap
 		if (series && verbose > 1)
 			pr_info("model string indicates TM %d series\n",
 				series);
-	}
-	/* newer Travelmate series do not have a space after 'TravelMate' */
-	else if (strncmp(str, "TravelMate", 10) == 0) {
+	} else if (strncmp(str, "TravelMate", 10) == 0) {
+		/* newer Travelmate series do not have a space after
+		 * 'TravelMate' */
 		switch (str[10]) {
 		case '2':
 			if (str[11] == '9') {
@@ -1057,7 +1139,7 @@ static unsigned int __init determine_lap
 			break;
 		case '3':
 			if (str[11] == '2' && str[14] == '3') {
-				// TM 3200 uses "TravelMate32003"
+				/* TM 3200 uses "TravelMate32003" */
 				series = 3200;
 			} else {
 				if (verbose > 1)
@@ -1122,13 +1204,16 @@ static unsigned int __init determine_lap
 			pr_info("model string indicates unknown TMxxx series\n");
 			break;
 		}
+
 		if (series && verbose > 1)
 			pr_info("model string indicates TM%d series\n", series);
 	} else if (strncmp(str, "Aspire ", 7) == 0) {
 		switch (str[7]) {
-		case '1':	/* Aspire 1xxx series */
+		case '1':
+			/* Aspire 1xxx series */
 			switch (str[8]) {
-			case '3':	/* Aspire 13xx series */
+			case '3':
+				/* Aspire 13xx series */
 				switch (str[9]) {
 				case '0':
 					series = 1300;
@@ -1148,7 +1233,8 @@ static unsigned int __init determine_lap
 					break;
 				}
 				break;
-			case '4':	/* Aspire 14xx series */
+			case '4':
+				/* Aspire 14xx series */
 				switch (str[9]) {
 				case '0':
 					series = 1400;
@@ -1174,7 +1260,8 @@ static unsigned int __init determine_lap
 				break;
 			}
 			break;
-		case '2':	/* Aspire 2xxx series */
+		case '2':
+			/* Aspire 2xxx series */
 			if (str[8] == '0') {
 				switch (str[9]) {
 				default:
@@ -1227,20 +1314,22 @@ static unsigned int __init determine_lap
 		if (verbose > 1)
 			pr_info("model string indicates no supported hardware\n");
 	}
-	return (series);
+
+	return series;
 }
 #endif
 
 #ifndef __x86_64__
 static void __init probe_model(void)
 {
-	int offset;		/* offset from beginning of reg1 to Model string */
+	/* offset from beginning of reg1 to Model string */
+	int offset;
 
 	if (verbose)
 		pr_info("start search for model string at %p\n", reg1);
 
-	/* first we look for Travelmate, if it isn't one we try to identify other
-	   laptops, such as Aspire */
+	/* first we look for Travelmate, if it isn't one we try to identify
+	 * other laptops, such as Aspire */
 	offset = COLUSSI("Travel", 6, reg1, AREA_SIZE);
 
 	/* Try to detect Aspire laptops */
@@ -1253,16 +1342,19 @@ static void __init probe_model(void)
 
 	if (offset >= 0) {
 		acerhk_model_addr = reg1 + offset;
+
 		/* copy the string, but not more than 15 characters */
 		strncpy(acerhk_model_string, acerhk_model_addr,
 			ACERHK_MODEL_STRLEN - 1);
+
 		if (verbose)
 			pr_info("found model string '%s' at %p\n",
 				acerhk_model_string, acerhk_model_addr);
 
 		if (bios_routine && verbose > 2)
 			pr_info("offset from model string to function address: 0x%lx\n",
-				bios_routine - (unsigned long)acerhk_model_addr);
+				bios_routine -
+				(unsigned long)acerhk_model_addr);
 
 		acerhk_series = determine_laptop_series(acerhk_model_string);
 	}
@@ -1332,6 +1424,7 @@ static void init_keymap_input(void)
 	set_keymap_name(k_prev, KEY_PREVIOUSSONG);
 	set_keymap_name(k_next, KEY_NEXTSONG);
 	set_keymap_name(k_display, KEY_MEDIA);	/* also not happy with this */
+
 	if (verbose > 1)
 		print_mapping();
 }
@@ -1341,7 +1434,8 @@ static int filter_idle_value(int keycode
 {
 	int validkey = 0;
 
-	if (keycode != 0x0 && keycode != 0x9610 && keycode != 0xc100 &&	/* Francois Valenduc, Aspire 1601 LC */
+	/* Francois Valenduc, Aspire 1601 LC */
+	if (keycode != 0x0 && keycode != 0x9610 && keycode != 0xc100 &&
 	    keycode != 0x8610 &&
 	    keycode != 0x861 && keycode != 0x8650 && keycode != 0x865)
 		validkey = keycode;
@@ -1366,7 +1460,8 @@ static void send_key_event(t_key_names k
 			pr_info("translated acer key name 0x%x to input key 0x%x\n",
 				key, input_key);
 
-		/* send press and release together, as there is no such event from acer as 'release' */
+		/* send press and release together, as there is no such event
+		 * from acer as 'release' */
 		input_report_key(acerhk_input_dev_ptr, input_key, 1);
 		input_report_key(acerhk_input_dev_ptr, input_key, 0);
 	}
@@ -1395,6 +1490,7 @@ static t_key_names transl8_key_code(int
 			/* use only lower 8 bits of value to distinguish keys */
 			keyname = acerhk_key2name[keycode & 0xff];
 		}
+
 		/* produce some log information for higher verbosity levels */
 		if (keyname != k_none && verbose > 2)
 			pr_info("translated acer key code 0x%x to key name 0x%x\n",
@@ -1404,8 +1500,8 @@ static t_key_names transl8_key_code(int
 				keycode);
 
 		if (autowlan) {
-			/* if automatic switching of wlan hardware is enabled, do it here
-			   on wireless key press */
+			/* if automatic switching of wlan hardware is enabled,
+			 * do it here on wireless key press */
 			if (keyname == k_wireless2) {
 				if (acerhk_bluetooth_state)
 					wbutton_fct_1(0);
@@ -1421,6 +1517,7 @@ static t_key_names transl8_key_code(int
 			}
 		}
 	}
+
 	return keyname;
 }
 #endif
@@ -1430,9 +1527,11 @@ static void acerhk_poll_event(unsigned l
 {
 #ifndef __x86_64__
 	unsigned int max = MAX_POLLING_LOOPS;
+
 	/* make sure not to loop more then 32 times */
 	if (!max || max > 32)
 		max = 32;
+
 	send_key_event(transl8_key_code(get_fnkey_event()));
 #endif
 	acerhk_timer_poll.expires = jiffies + acerhk_polling_delay;
@@ -1462,6 +1561,7 @@ static void init_input(void)
 #ifndef STATIC_INPUT_DEV
 	/* allocate acerhk input device */
 	acerhk_input_dev_ptr = input_allocate_device();
+
 	/* enter some name */
 	acerhk_input_dev_ptr->name = "Acer hotkey driver";
 #else
@@ -1478,6 +1578,7 @@ static void init_input(void)
 	 * Therefore I enable all possible keys */
 	for (i = KEY_RESERVED; i < BTN_MISC; i++)
 		set_bit(i, acerhk_input_dev_ptr->keybit);
+
 	/* set mapping keyname -> input event */
 	init_keymap_input();
 
@@ -1511,9 +1612,10 @@ static void start_polling(void)
 		add_timer(&acerhk_timer_poll);
 		acerhk_polling_state = 1;
 
-		pr_info("Your hardware does not need polling enabled for hotkeys to work, "
-			"you can safely disable polling by using the module parameter poll=0 (unless you "
-			"want to play around with the driver and see if there are buttons which need polling).\n");
+		pr_info("Your hardware does not need polling enabled for hotkeys to work,\n");
+		pr_info("you can safely disable polling by using the module parameter\n");
+		pr_info("poll=0 (unless you want to play around with the driver and see\n");
+		pr_info("if there are buttons which need polling).\n");
 
 		if (verbose)
 			pr_info("starting key polling, every %d ms\n",
@@ -1526,11 +1628,11 @@ static void start_polling(void)
 static void start_blinking(void)
 {
 	if (acerhk_blueled_blinking == -1) {
-		// blinking was disabled... enable it!
+		/* blinking was disabled... enable it! */
 		acerhk_timer_blinking.function = acerhk_blink_event;
 		acerhk_timer_blinking.expires =
 		    jiffies + acerhk_blueled_blinking_delay;
-		acerhk_timer_blinking.data = 0;	// not used
+		acerhk_timer_blinking.data = 0;	/* not used */
 		add_timer(&acerhk_timer_blinking);
 		acerhk_blueled_blinking = 0;
 
@@ -1564,7 +1666,6 @@ static void release_input(void)
 /* {{{ procfs functions */
 
 #ifndef CONFIG_PROC_FS
-
 static int acerhk_proc_init(void)
 {
 	return 1;
@@ -1573,23 +1674,24 @@ static int acerhk_proc_init(void)
 
 /* This macro frees the machine specific function from bounds checking and
  * things like that... */
-#define	PRINT_PROC(fmt,args...)                     \
-  do {												\
-    *len += sprintf( buffer+*len, fmt, ##args );	\
-    if (*begin + *len > offset + size)				\
-      return( 0 );                                  \
-    if (*begin + *len < offset) {					\
-      *begin += *len;								\
-      *len = 0;                                     \
-    }												\
-  } while(0)
+#define	PRINT_PROC(fmt, args...)				\
+	do {							\
+		*len += sprintf(buffer + *len, fmt, ##args);	\
+		if (*begin + *len > offset + size)		\
+			return 0;				\
+		if (*begin + *len < offset) {			\
+			*begin += *len;				\
+			*len = 0;				\
+		}						\
+	} while (0)
 
 static int pc_proc_infos(char *buffer, int *len,
-			 off_t * begin, off_t offset, int size)
+			 off_t *begin, off_t offset, int size)
 {
 	PRINT_PROC("Acer hotkeys\n");
 	PRINT_PROC("Model(Type)\t: %s(", acerhk_model_string);
 	PRINT_PROC("Dritek)\n");
+
 	if (bios_routine != 0) {
 		PRINT_PROC("request handler\t: 0x%x\n", bios_routine);
 		if (cmos_index) {
@@ -1598,10 +1700,12 @@ static int pc_proc_infos(char *buffer, i
 		} else {
 			PRINT_PROC("CMOS index\t: not available\n");
 		}
+
 		if (acerhk_polling_state == 1)
 			PRINT_PROC("kernel polling\t: active\n");
 		else
 			PRINT_PROC("kernel polling\t: inactive\n");
+
 		PRINT_PROC("autoswitch wlan\t: ");
 		if (autowlan == 1)
 			PRINT_PROC("enabled\n");
@@ -1611,10 +1715,12 @@ static int pc_proc_infos(char *buffer, i
 		PRINT_PROC("request handler\t: not found\n");
 		PRINT_PROC("kernel polling\t: not possible\n");
 	}
+
 	/* model specific infos */
 	PRINT_PROC("use of Dritek EC: ");
 	PRINT_PROC("enabled\n");
-	return (1);
+
+	return 1;
 }
 
 static int acerhk_proc_info(char *buffer, char **start, off_t offset,
@@ -1626,10 +1732,11 @@ static int acerhk_proc_info(char *buffer
 	*eof = pc_proc_infos(buffer, &len, &begin, offset, size);
 
 	if (offset >= begin + len)
-		return (0);
+		return 0;
+
 	*start = buffer + (offset - begin);
-	return (size < begin + len - offset ? size : begin + len - offset);
 
+	return (size < begin + len - offset ? size : begin + len - offset);
 }
 
 static int acerhk_proc_key(char *buffer, char **start, off_t offset,
@@ -1638,9 +1745,12 @@ static int acerhk_proc_key(char *buffer,
 	if (size >= 5 && offset == 0) {
 		snprintf(buffer + offset, size, "n/a\n");
 		*eof = 1;
+
 		return 5;
 	}
+
 	*eof = 1;
+
 	return 0;
 }
 
@@ -1649,18 +1759,23 @@ static int acerhk_proc_led(struct file *
 {
 	char str[4];
 	int len;
+
 	if (count > 4)
 		len = 4;
 	else
 		len = count;
+
 	if (copy_from_user(str, buffer, len))
 		return -EFAULT;
+
 	str[3] = '\0';
-	if (((len >= 2) && (!strncmp(str, "on", 2) || !strncmp(str, "an", 2)))
-	    || str[0] == '1')
+	if ((
+	     (len >= 2) && (!strncmp(str, "on", 2) || !strncmp(str, "an", 2))
+	    ) || str[0] == '1')
 		set_mail_led(1);
 	else
 		set_mail_led(0);
+
 	return len;
 }
 
@@ -1669,12 +1784,15 @@ static int acerhk_proc_wirelessled(struc
 {
 	char str[4];
 	int len;
+
 	if (count > 4)
 		len = 4;
 	else
 		len = count;
+
 	if (copy_from_user(str, buffer, len))
 		return -EFAULT;
+
 	str[3] = '\0';
 	if (((len >= 2) && (!strncmp(str, "on", 2) || !strncmp(str, "an", 2)))
 	    || str[0] == '1') {
@@ -1692,6 +1810,7 @@ static int acerhk_proc_wirelessled(struc
 		else
 			wbutton_fct_2(0);
 	}
+
 	return len;
 }
 
@@ -1717,12 +1836,14 @@ static int acerhk_proc_blueled(struct fi
 		len = MAXLEN;
 	else
 		len = count;
+
 	if (copy_from_user(str, buffer, len))
 		return -EFAULT;
 	str[MAXLEN - 1] = '\0';
 
 	/* try to parse a number */
 	isNumber = sscanf(str, "%u", &acerhk_blueled_blinking_delay);
+
 	/* if the delay is 0, turn off the led */
 	if (isNumber && acerhk_blueled_blinking_delay != 0
 	    && acerhk_blueled_blinking_delay != 1) {
@@ -1755,9 +1876,11 @@ static int acerhk_proc_blueled(struct fi
 		else
 			wbutton_fct_1(0);
 	}
+
 	return len;
 }
 
+
 static int acerhk_proc_init(void)
 {
 	struct proc_dir_entry *entry;
@@ -1841,11 +1964,13 @@ static void acerhk_proc_cleanup(void)
 {
 	if (proc_acer_dir) {
 		remove_proc_entry("info", proc_acer_dir);
+
 		/* On dritek type hardware key file is already removed */
 		remove_proc_entry("led", proc_acer_dir);
 		remove_proc_entry("wirelessled", proc_acer_dir);
 		remove_proc_entry("blueled", proc_acer_dir);
 		remove_proc_entry("driver/acerhk", NULL);
+
 		proc_acer_dir = NULL;
 	}
 }
@@ -1963,10 +2088,10 @@ static int acerhk_resume(struct platform
 #endif
 
 static const struct file_operations acerhk_fops = {
-owner:		THIS_MODULE,
-unlocked_ioctl:	acerhk_unlocked_ioctl,
-open:		acerhk_open,
-release:	acerhk_release,
+owner:		  THIS_MODULE,
+unlocked_ioctl	: acerhk_unlocked_ioctl,
+open		: acerhk_open,
+release		: acerhk_release,
 };
 
 static struct miscdevice acerhk_misc_dev = {
@@ -1983,7 +2108,8 @@ static void __devinit model_init(void)
 	/* set callroutine, features and keymap for model */
 	setup_model_features(acerhk_series);
 
-	/* override initial state of wireless hardware if specified by module options */
+	/* override initial state of wireless hardware if specified by module
+	 * options */
 	if (wlan_state >= 0)
 		acerhk_wlan_state = wlan_state;
 
@@ -2076,18 +2202,20 @@ static int __devinit acerhk_probe(struct
 
 		pr_info("Acer Travelmate hotkey driver\n");
 
-		/* If automatic switching of wlan is wanted but polling is disabled,
-		   automatically enable it */
+		/* If automatic switching of wlan is wanted but polling is
+		 * disabled, automatically enable it */
 		if (!poll && autowlan) {
 			pr_info("Automatic switching of wireless hardware needs polling, enabling it\n");
 			poll = 1;
 		}
 
-		/* start automatic polling of key presses if wanted and bios routine found */
+		/* start automatic polling of key presses if wanted and bios
+		 * routine found */
 		if (poll && bios_routine)
 			start_polling();
 #endif
 	}
+
 	return ret;
 }
 
@@ -2150,6 +2278,7 @@ err_free_device:
 	platform_device_put(acerhk_platform_device);
 err_driver_unregister:
 	platform_driver_unregister(&acerhk_driver);
+
 	return error;
 }
 
