From 185a4281ce778a02da5eedbaa3486c54ab79dc75 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Mon, 1 Jul 2013 02:28:59 +0200
Subject: [PATCH 22/65] acerhk: nuke dead code

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 247 ++++++++++++++----------------------------
 1 file changed, 80 insertions(+), 167 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -57,7 +57,7 @@
 #include <linux/input.h>
 #include <linux/interrupt.h>
 #include <linux/proc_fs.h>
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #include <linux/delay.h>
 
 #include "acerhk.h"
@@ -474,12 +474,6 @@ static asmlinkage void call_bios_6xx(str
 #endif
 }
 
-#define PRINT_BUFFER(x) \
-	pr_info("eax=0x%x ebx=0x%x ecx=0x%x edx=0x%x\n" \
-		"%s: edi=0x%x esi=0x%x ebp=0x%x\n", \
-		x.eax, x.ebx, x.ecx, x.edx, \
-		KBUILD_MODNAME, x.edi, x.esi, x.ebp);
-
 /* get_fnkey_event
  *
  * gets the first (oldest) key id from the queue of events
@@ -589,35 +583,9 @@ static int wbutton_fct_2(int val)
 
 		regs.eax = 0x00;
 	}
-	return regs.eax & 0xffff;
-}
-
-#ifndef __x86_64__
-/* get_cmos_index
- *
- * gets index of CMOS port from ROM. The number of events is monitored
- * in this port.
- *
- * return value: index of CMOS port
- */
-static int get_cmos_index(void)
-{
-	struct register_buffer regs;
-	regs.eax = 0x9610;
-	regs.ebx = 0x51C;
-
-	preempt_disable();
-	call_bios(&regs);
-	preempt_enable_no_resched();
-
-	cmos_index = regs.ecx & 0xff;
-
-	if (verbose)
-		pr_info("cmos index set to 0x%x\n", cmos_index);
 
-	return cmos_index;
+	return regs.eax & 0xffff;
 }
-#endif
 
 /* get_nr_events
  *
@@ -1067,14 +1035,6 @@ static unsigned int __init determine_lap
 				}
 			}
 			break;
-		case '6':	/* older Travelmate 6xx series */
-			switch (str[12]) {
-			default:
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM 6xx series\n");
-				break;
-			}
-			break;
 		default:
 			pr_info("model string indicates unknown TM xxx series\n");
 			break;
@@ -1236,57 +1196,28 @@ static unsigned int __init determine_lap
 					pr_info("model string indicates unknown Aspire 2xxx series\n");
 			}
 			break;
-		case '3':	/* Aspire 3xxx series */
-			if (str[8] == '0') {
-				switch (str[9]) {
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown Aspire 30xx series\n");
-					break;
-				}
-			} else {
-				if (verbose > 1)
-					pr_info("model string indicates unknown Aspire 3xxx series\n");
-			}
-			break;
-		case '5':	/* Aspire 5xxx series */
-			if (str[8] == '0') {
-				switch (str[9]) {
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown Aspire 50xx series\n");
-					break;
-				}
-			} else if (str[8] == '1' && str[9] == '0') {
+		case '5':
+			/* Aspire 5xxx series */
+			if (str[8] == '1' && str[9] == '0') {
 				series = 5100;
 			} else {
 				if (verbose > 1)
 					pr_info("model string indicates unknown Aspire 5xxx series\n");
 			}
-			break;
 		default:
 			if (verbose > 1)
 				pr_info("model string indicates unknown Aspire series\n");
 			break;
 		}
+
 		if (series && verbose > 1)
 			pr_info("model string indicates Aspire %d series\n",
 				series);
 	} else if (strncmp(str, "Extensa ", 8) == 0) {
 		/* Extensa series */
-		switch (str[8]) {
-		case '3':
-			switch (str[9]) {
-			case '0':
-				series = 3000;
-				break;
-			default:
-				break;
-			}
-			break;
-		default:
-			break;
-		}
+		if (str[8] == '3' && str[9] == 0)
+			series = 3000;
+
 		if (series && verbose > 1)
 			pr_info("model string indicates Extensa %d series\n",
 				series);
@@ -1448,7 +1379,8 @@ static t_key_names transl8_key_code(int
 	t_key_names keyname = k_none;
 
 	/* first filter out idle values */
-	if ((keycode = filter_idle_value(keycode))) {
+	keycode = filter_idle_value(keycode);
+	if (keycode) {
 		if (verbose > 3)
 			pr_info("received key code 0x%x\n", keycode);
 
@@ -1826,102 +1758,83 @@ static int acerhk_proc_blueled(struct fi
 	return len;
 }
 
-
 static int acerhk_proc_init(void)
 {
-	int retval;
 	struct proc_dir_entry *entry;
+
 	/* create own directory */
 	proc_acer_dir = proc_mkdir("driver/acerhk", NULL);
 	if (proc_acer_dir == NULL) {
-		retval = 0;
 		pr_info("could not create /proc/driver/acerhk\n");
-	} else {
-		/* now create several files, first general info ... */
-		entry = create_proc_read_entry("info",
-					       0444, proc_acer_dir,
-					       acerhk_proc_info, NULL);
-
-		if (entry == NULL) {
-			pr_info("cannot create info file\n");
-			remove_proc_entry("driver/acerhk", NULL);
-			retval = 0;
-		} else {
-			/* ... last pressed key ... */
-			entry = create_proc_read_entry("key",
-						       0444, proc_acer_dir,
-						       acerhk_proc_key, NULL);
-			if (entry == NULL) {
-				pr_info("cannot create key file\n");
-				remove_proc_entry("info", proc_acer_dir);
-				remove_proc_entry("driver/acerhk", NULL);
-				retval = 0;
-			} else {
-				/* ... and led control file */
-				entry =
-				    create_proc_entry("led", 0222,
-						      proc_acer_dir);
-				if (entry == NULL) {
-					pr_info("cannot create LED file\n");
-					remove_proc_entry("info",
-							  proc_acer_dir);
-					remove_proc_entry("key", proc_acer_dir);
-					remove_proc_entry("driver/acerhk",
-							  NULL);
-					retval = 0;
-				} else {
-					entry->write_proc = acerhk_proc_led;
-					/* ... and wireless led controll file */
-					entry =
-					    create_proc_entry("wirelessled",
-							      0222,
-							      proc_acer_dir);
-					if (entry == NULL) {
-						pr_info("cannot create wirelessled file\n");
-						remove_proc_entry("info",
-								  proc_acer_dir);
-						remove_proc_entry("key",
-								  proc_acer_dir);
-						remove_proc_entry("led",
-								  proc_acer_dir);
-						remove_proc_entry
-						    ("driver/acerhk", NULL);
-						retval = 0;
-					} else {
-						entry->write_proc =
-						    acerhk_proc_wirelessled;
-						/* ... and bluetooth led controll file */
-						entry =
-						    create_proc_entry("blueled",
-								      0222,
-								      proc_acer_dir);
-						if (entry == NULL) {
-							pr_info("cannot create blueled file\n");
-							remove_proc_entry
-							    ("info",
-							     proc_acer_dir);
-							remove_proc_entry("key",
-									  proc_acer_dir);
-							remove_proc_entry("led",
-									  proc_acer_dir);
-							remove_proc_entry
-							    ("wirelessled",
-							     proc_acer_dir);
-							remove_proc_entry
-							    ("driver/acerhk",
-							     NULL);
-							retval = 0;
-						} else {
-							entry->write_proc =
-							    acerhk_proc_blueled;
-							retval = 1;
-						}
-					}
-				}
-			}
-		}
+
+		return 0;
+	}
+
+	/* now create several files, first general info ... */
+	entry = create_proc_read_entry("info", 0444, proc_acer_dir,
+				       acerhk_proc_info, NULL);
+
+	if (entry == NULL) {
+		pr_info("cannot create info file\n");
+		remove_proc_entry("driver/acerhk", NULL);
+
+		return 0;
+	}
+
+	/* ... last pressed key ... */
+	entry = create_proc_read_entry("key", 0444, proc_acer_dir,
+				       acerhk_proc_key, NULL);
+	if (entry == NULL) {
+		pr_info("cannot create key file\n");
+		remove_proc_entry("info", proc_acer_dir);
+		remove_proc_entry("driver/acerhk", NULL);
+
+		return 0;
+	}
+
+	/* ... and led control file */
+	entry = create_proc_entry("led", 0222,
+			      proc_acer_dir);
+	if (entry == NULL) {
+		pr_info("cannot create LED file\n");
+		remove_proc_entry("info", proc_acer_dir);
+		remove_proc_entry("key", proc_acer_dir);
+		remove_proc_entry("driver/acerhk", NULL);
+		return 0;
+	}
+
+	entry->write_proc = acerhk_proc_led;
+	/* ... and wireless led controll file */
+	entry = create_proc_entry("wirelessled", 0222, proc_acer_dir);
+	if (entry == NULL) {
+		pr_info("cannot create wirelessled file\n");
+		remove_proc_entry("info",
+				 proc_acer_dir);
+		remove_proc_entry("key",
+				 proc_acer_dir);
+		remove_proc_entry("led",
+				 proc_acer_dir);
+		remove_proc_entry("driver/acerhk", NULL);
+
+		return 0;
+	}
+	entry->write_proc = acerhk_proc_wirelessled;
+
+	/* ... and bluetooth led control file */
+	entry = create_proc_entry("blueled", 0222, proc_acer_dir);
+	if (entry == NULL) {
+		pr_info("cannot create blueled file\n");
+		remove_proc_entry("info", proc_acer_dir);
+		remove_proc_entry("key", proc_acer_dir);
+		remove_proc_entry("led", proc_acer_dir);
+		remove_proc_entry("wirelessled", proc_acer_dir);
+		remove_proc_entry("driver/acerhk", NULL);
+
+		return 0;
 	}
-	return retval;
+	entry->write_proc = acerhk_proc_blueled;
+
+	return 1;
 }
 
 static void acerhk_proc_cleanup(void)
