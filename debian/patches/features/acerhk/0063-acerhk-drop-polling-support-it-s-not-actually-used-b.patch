From 70db519e70ba29661d21c90d9fd9945deaaae5d5 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Thu, 15 Aug 2013 23:34:51 +0200
Subject: [PATCH 63/65] acerhk: drop polling support, it's not actually used by
 the supported hardware

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 185 ------------------------------------------
 1 file changed, 185 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -54,10 +54,6 @@
 #define ACERHK_GET_THERMAL_EVENT _IOR('p', 0x05, short)	/* ? */
 #define ACERHK_MAIL_LED_OFF      _IO('p', 0x10)	/* switch mail LED off */
 #define ACERHK_MAIL_LED_ON       _IO('p', 0x11)	/* switch mail LED on */
-#define ACERHK_START_POLLING     _IO('p', 0x12)	/* poll keys in kernel, send real key events */
-#define ACERHK_STOP_POLLING      _IO('p', 0x13)	/* stop key polling in kernel */
-#define ACERHK_GET_KEY_MAP       _IOR('p', 0x20, int)	/* Get mapping of key names to key events, */
-#define ACERHK_SET_KEY_MAP       _IOW('p', 0x21, int)	/* Set mapping of key names to key events */
 
 /* all possible keys (known to me) */
 typedef enum e_key_names {
@@ -115,12 +111,6 @@ struct register_buffer {
 
 typedef asmlinkage void (*bios_call) (struct register_buffer *);
 
-/*
- * maximum number of polling loops, adjust it if needed to values between
- * 1 and 32
- */
-#define MAX_POLLING_LOOPS 16U
-
 /* module parameters */
 static int verbose = 1;
 module_param(verbose, int, 0444);
@@ -155,15 +145,6 @@ static unsigned char acerhk_key2name[0xf
 /* map of acer key names to key events */
 static t_map_name2event acerhk_name2event;
 
-/* timer for polling key presses */
-static struct timer_list acerhk_timer_poll;
-
-/* polling active */
-static int acerhk_polling_state;
-
-/* polling delay */
-static unsigned acerhk_polling_delay = HZ / 5;
-
 /* wlan hardware toggle */
 static int acerhk_wlan_state;
 
@@ -631,14 +612,8 @@ static int acerhk_status_show(struct seq
 		} else {
 			seq_printf(m, "CMOS index:\t not available\n");
 		}
-
-		if (acerhk_polling_state == 1)
-			seq_printf(m, "kernel polling:\t active\n");
-		else
-			seq_printf(m, "kernel polling:\t inactive\n");
 	} else {
 		seq_printf(m, "request handler:\t not found\n");
-		seq_printf(m, "kernel polling:\t not possible\n");
 	}
 #else
 	seq_printf(m, "Acer Travelmate hotkey driver dummy (x86_64).\n");
@@ -910,101 +885,6 @@ static void init_keymap_input(void)
 	set_keymap_name(k_display, KEY_MEDIA);	/* also not happy with this */
 }
 
-#ifndef __x86_64__
-static int filter_idle_value(int keycode)
-{
-	int validkey = 0;
-
-	/* Francois Valenduc, Aspire 1601 LC */
-	if (keycode != 0x0000 &&
-	    keycode != 0x9610 &&
-	    keycode != 0xc100 &&
-	    keycode != 0x8610 &&
-	    keycode != 0x0861 &&
-	    keycode != 0x8650 &&
-	    keycode != 0x0865)
-		validkey = keycode;
-
-	if (verbose >= 5 && !validkey)
-		pr_info("throw away idle value 0x%x\n", keycode);
-
-	return validkey;
-}
-#endif
-
-#ifndef __x86_64__
-static void send_key_event(t_key_names key)
-{
-	unsigned int input_key;
-
-	if (key != k_none) {
-		/* convert key name to kernel keycode */
-		input_key = acerhk_name2event[key];
-
-		if (verbose >= 3)
-			pr_info("translated acer key name 0x%x to input key 0x%x\n",
-				key, input_key);
-
-		/* send press and release together, as there is no such event
-		 * from acer as 'release' */
-		input_report_key(acerhk_input_dev_ptr, input_key, 1);
-		input_report_key(acerhk_input_dev_ptr, input_key, 0);
-	}
-}
-#endif
-
-#ifndef __x86_64__
-static t_key_names transl8_key_code(int keycode)
-{
-	t_key_names keyname = k_none;
-
-	/* first filter out idle values */
-	keycode = filter_idle_value(keycode);
-	if (keycode) {
-		if (verbose >= 4)
-			pr_info("received key code 0x%x\n", keycode);
-
-		/* translate keycode to key name */
-		if (keycode >= 0 && keycode <= 255) {
-			keyname = acerhk_key2name[keycode];
-		} else {
-			if (verbose >= 4)
-				pr_info("keycode 0x%x too big, will use only 8 bits\n",
-					keycode);
-
-			/* use only lower 8 bits of value to distinguish keys */
-			keyname = acerhk_key2name[keycode & 0xff];
-		}
-
-		/* produce some log information for higher verbosity levels */
-		if (keyname != k_none && verbose >= 3)
-			pr_info("translated acer key code 0x%x to key name 0x%x\n",
-				keycode, keyname);
-		else if (keyname == k_none && verbose >= 4)
-			pr_info("translated acer key code 0x%x to no key\n",
-				keycode);
-	}
-
-	return keyname;
-}
-#endif
-
-/* polling timer handler */
-static void acerhk_poll_event(unsigned long save_size)
-{
-#ifndef __x86_64__
-	unsigned int max = MAX_POLLING_LOOPS;
-
-	/* make sure not to loop more then 32 times */
-	if (!max || max > 32)
-		max = 32;
-
-	send_key_event(transl8_key_code(get_fnkey_event()));
-#endif
-	acerhk_timer_poll.expires = jiffies + acerhk_polling_delay;
-	add_timer(&acerhk_timer_poll);
-}
-
 static int init_input(void)
 {
 	int i;
@@ -1035,48 +915,11 @@ static int init_input(void)
 		input_free_device(acerhk_input_dev_ptr);
 	}
 
-	init_timer(&acerhk_timer_poll);
-	acerhk_polling_state = 0;
-
 	return ret;
 }
 
-static void stop_polling(void)
-{
-	if (acerhk_polling_state == 1) {
-		del_timer(&acerhk_timer_poll);
-
-		if (verbose)
-			pr_info("key polling stopped\n");
-
-		acerhk_polling_state = 0;
-	} else if (verbose) {
-		pr_info("key polling not active\n");
-	}
-}
-
-static void start_polling(void)
-{
-	if (acerhk_polling_state != 1) {
-		acerhk_timer_poll.function = acerhk_poll_event;
-		acerhk_timer_poll.expires = jiffies + acerhk_polling_delay;
-		acerhk_timer_poll.data = get_nr_events();
-		add_timer(&acerhk_timer_poll);
-		acerhk_polling_state = 1;
-
-		pr_info("Your hardware does not require polling to be enabled.\n");
-
-		if (verbose)
-			pr_info("starting key polling, every %d ms\n",
-				acerhk_polling_delay);
-	} else if (verbose) {
-		pr_info("key polling already active\n");
-	}
-}
-
 static void release_input(void)
 {
-	stop_polling();
 	input_unregister_device(acerhk_input_dev_ptr);
 }
 /* key polling and translation }}} */
@@ -1108,14 +951,6 @@ static long acerhk_unlocked_ioctl(struct
 		launch_connect(1);
 		retval = 0;
 		break;
-	case ACERHK_START_POLLING:
-		start_polling();
-		retval = 0;
-		break;
-	case ACERHK_STOP_POLLING:
-		stop_polling();
-		retval = 0;
-		break;
 	case ACERHK_DISCONNECT:
 		launch_connect(0);
 		retval = 0;
@@ -1136,26 +971,6 @@ static long acerhk_unlocked_ioctl(struct
 		set_mail_led(1);
 		retval = 0;
 		break;
-	case ACERHK_GET_KEY_MAP:
-		if (copy_to_user
-		    ((t_map_name2event *)arg, &acerhk_name2event,
-		     sizeof(acerhk_name2event)))
-			retval = -EFAULT;
-		else
-			retval = 0;
-		break;
-	case ACERHK_SET_KEY_MAP:
-		if (copy_from_user
-		    (&acerhk_name2event, (t_map_name2event *)arg,
-		     sizeof(acerhk_name2event)))
-			retval = -EFAULT;
-		else {
-			if (verbose)
-				pr_info("changed key mapping, check /sys/kernel/debug/acerhk/keymap.\n");
-
-			retval = 0;
-		}
-		break;
 	default:
 		retval = -EINVAL;
 	}
