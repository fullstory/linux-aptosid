From 46dc429e65b5c180dcb995132ee4915162bf3fef Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Tue, 13 Aug 2013 22:12:09 +0200
Subject: [PATCH 40/65] acerhk: clean up remaining printk()s

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 123 ++++++++++++++++++++++++------------------
 1 file changed, 71 insertions(+), 52 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -717,77 +717,96 @@ static void print_features(void)
 {
 	int i;
 
-	pr_info("supported keys:");
 	for (i = 0; i < 255; i++) {
 		switch (acerhk_key2name[i]) {
 		case k_help:
-			printk(KERN_INFO " help");
+			pr_info("supported key: help, mapped to 0x%x\n",
+				acerhk_name2event[k_help]);
 			break;
 		case k_setup:
-			printk(KERN_INFO " setup");
+			pr_info("supported key: setup, mapped to 0x%x\n",
+				acerhk_name2event[k_setup]);
 			break;
 		case k_p1:
-			printk(KERN_INFO " p1");
+			pr_info("supported key: p1, mapped to 0x%x\n",
+				acerhk_name2event[k_p1]);
 			break;
 		case k_p2:
-			printk(KERN_INFO " p2");
+			pr_info("supported key: p2, mapped to 0x%x\n",
+				acerhk_name2event[k_p2]);
 			break;
 		case k_p3:
-			printk(KERN_INFO " p3");
+			pr_info("supported key: p3, mapped to 0x%x\n",
+				acerhk_name2event[k_p3]);
 			break;
 		case k_www:
-			printk(KERN_INFO " www");
+			pr_info("supported key: www, mapped to 0x%x\n",
+				acerhk_name2event[k_www]);
 			break;
 		case k_mail:
-			printk(KERN_INFO " mail");
+			pr_info("supported key: mail, mapped to 0x%x\n",
+				acerhk_name2event[k_mail]);
 			break;
 		case k_wireless:
-			printk(KERN_INFO " wireless");
+			pr_info("supported key: wireless, mapped to 0x%x\n",
+				acerhk_name2event[k_wireless]);
 			break;
 		case k_power:
-			printk(KERN_INFO " power");
+			pr_info("supported key: power, mapped to 0x%x\n",
+				acerhk_name2event[k_power]);
 			break;
 		case k_mute:
-			printk(KERN_INFO " mute");
+			pr_info("supported key: mute, mapped to 0x%x\n",
+				acerhk_name2event[k_mute]);
 			break;
 		case k_volup:
-			printk(KERN_INFO " volup");
+			pr_info("supported key: volup, mapped to 0x%x\n",
+				acerhk_name2event[k_volup]);
 			break;
 		case k_voldn:
-			printk(KERN_INFO " voldn");
+			pr_info("supported key: voldn, mapped to 0x%x\n",
+				acerhk_name2event[k_voldn]);
 			break;
 		case k_res:
-			printk(KERN_INFO " res");
+			pr_info("supported key: res, mapped to 0x%x\n",
+				acerhk_name2event[k_res]);
 			break;
 		case k_close:
-			printk(KERN_INFO " close");
+			pr_info("supported key: close, mapped to 0x%x\n",
+				acerhk_name2event[k_close]);
 			break;
 		case k_open:
-			printk(KERN_INFO " open");
+			pr_info("supported key: open, mapped to 0x%x\n",
+				acerhk_name2event[k_open]);
 			break;
 		case k_wireless2:
-			printk(KERN_INFO " wireless2");
+			pr_info("supported key: wireless2, mapped to 0x%x\n",
+				acerhk_name2event[k_wireless2]);
 			break;
 		case k_play:
-			printk(KERN_INFO " play");
+			pr_info("supported key: play, mapped to 0x%x\n",
+				acerhk_name2event[k_play]);
 			break;
 		case k_stop:
-			printk(KERN_INFO " stop");
+			pr_info("supported key: stop, mapped to 0x%x\n",
+				acerhk_name2event[k_stop]);
 			break;
 		case k_prev:
-			printk(KERN_INFO " prev");
+			pr_info("supported key: prev, mapped to 0x%x\n",
+				acerhk_name2event[k_prev]);
 			break;
 		case k_next:
-			printk(KERN_INFO " next");
+			pr_info("supported key: next, mapped to 0x%x\n",
+				acerhk_name2event[k_next]);
 			break;
 		case k_display:
-			printk(KERN_INFO " display");
+			pr_info("supported key: display, mapped to 0x%x\n",
+				acerhk_name2event[k_display]);
 			break;
 		default:
 			break;
 		}
 	}
-	printk(KERN_INFO "\n");
 
 	if (acerhk_model_features & TM_F_MUTE_LED_EC)
 		pr_info("mute led is supported\n");
@@ -811,16 +830,17 @@ static void print_features(void)
 	else if (acerhk_model_features & TM_F_BLUE_EC2)
 		pr_info("bluetooth control (EC2) is supported\n");
 
-	pr_info("supported functions:");
 	if (acerhk_model_features & TM_F_CONNECT)
-		printk(KERN_INFO " connect");
+		pr_info("supported function: connect");
+
 	if (acerhk_model_features & TM_F_THERMAL)
-		printk(KERN_INFO " thermal");
+		pr_info("supported function: thermal");
+
 	if (acerhk_model_features & TM_F_PBUTTON)
-		printk(KERN_INFO " pbutton");
+		pr_info("supported function: pbutton");
+
 	if (acerhk_model_features & TM_F_WBUTTON)
-		printk(KERN_INFO " wbutton");
-	printk(KERN_INFO "\n");
+		pr_info("supported function: wbutton");
 }
 
 static void __init setup_keymap_model(unsigned int series)
@@ -973,28 +993,27 @@ static void __init probe_model(void)
 
 static void print_mapping(void)
 {
-	pr_info("key mapping:\n");
-	pr_info("help      0x%x\n", acerhk_name2event[k_help]);
-	pr_info("setup     0x%x\n", acerhk_name2event[k_setup]);
-	pr_info("p1        0x%x\n", acerhk_name2event[k_p1]);
-	pr_info("p2        0x%x\n", acerhk_name2event[k_p2]);
-	pr_info("p3        0x%x\n", acerhk_name2event[k_p3]);
-	pr_info("www       0x%x\n", acerhk_name2event[k_www]);
-	pr_info("mail      0x%x\n", acerhk_name2event[k_mail]);
-	pr_info("wireless  0x%x\n", acerhk_name2event[k_wireless]);
-	pr_info("power     0x%x\n", acerhk_name2event[k_power]);
-	pr_info("mute      0x%x\n", acerhk_name2event[k_mute]);
-	pr_info("volup     0x%x\n", acerhk_name2event[k_volup]);
-	pr_info("voldn     0x%x\n", acerhk_name2event[k_voldn]);
-	pr_info("res       0x%x\n", acerhk_name2event[k_res]);
-	pr_info("close     0x%x\n", acerhk_name2event[k_close]);
-	pr_info("open      0x%x\n", acerhk_name2event[k_open]);
-	pr_info("wireless2 0x%x\n", acerhk_name2event[k_wireless2]);
-	pr_info("play      0x%x\n", acerhk_name2event[k_play]);
-	pr_info("stop      0x%x\n", acerhk_name2event[k_stop]);
-	pr_info("prev      0x%x\n", acerhk_name2event[k_prev]);
-	pr_info("next      0x%x\n", acerhk_name2event[k_next]);
-	pr_info("display   0x%x\n", acerhk_name2event[k_display]);
+	pr_info("key mapping help      0x%x\n", acerhk_name2event[k_help]);
+	pr_info("key mapping setup     0x%x\n", acerhk_name2event[k_setup]);
+	pr_info("key mapping p1        0x%x\n", acerhk_name2event[k_p1]);
+	pr_info("key mapping p2        0x%x\n", acerhk_name2event[k_p2]);
+	pr_info("key mapping p3        0x%x\n", acerhk_name2event[k_p3]);
+	pr_info("key mapping www       0x%x\n", acerhk_name2event[k_www]);
+	pr_info("key mapping mail      0x%x\n", acerhk_name2event[k_mail]);
+	pr_info("key mapping wireless  0x%x\n", acerhk_name2event[k_wireless]);
+	pr_info("key mapping power     0x%x\n", acerhk_name2event[k_power]);
+	pr_info("key mapping mute      0x%x\n", acerhk_name2event[k_mute]);
+	pr_info("key mapping volup     0x%x\n", acerhk_name2event[k_volup]);
+	pr_info("key mapping voldn     0x%x\n", acerhk_name2event[k_voldn]);
+	pr_info("key mapping res       0x%x\n", acerhk_name2event[k_res]);
+	pr_info("key mapping close     0x%x\n", acerhk_name2event[k_close]);
+	pr_info("key mapping open      0x%x\n", acerhk_name2event[k_open]);
+	pr_info("key mapping wireless2 0x%x\n", acerhk_name2event[k_wireless2]);
+	pr_info("key mapping play      0x%x\n", acerhk_name2event[k_play]);
+	pr_info("key mapping stop      0x%x\n", acerhk_name2event[k_stop]);
+	pr_info("key mapping prev      0x%x\n", acerhk_name2event[k_prev]);
+	pr_info("key mapping next      0x%x\n", acerhk_name2event[k_next]);
+	pr_info("key mapping display   0x%x\n", acerhk_name2event[k_display]);
 }
 
 static void set_keymap_name(t_key_names name, unsigned int key)
@@ -1095,7 +1114,7 @@ static t_key_names transl8_key_code(int
 		else {
 			if (verbose > 3)
 				pr_info("keycode 0x%x too big, will use only 8 bits\n",
-				       keycode);
+				        keycode);
 
 			/* use only lower 8 bits of value to distinguish keys */
 			keyname = acerhk_key2name[keycode & 0xff];
