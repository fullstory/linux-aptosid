From 01a665fe5874d7d415a4dded2565f34f1b626464 Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Mon, 1 Jul 2013 02:31:08 +0200
Subject: [PATCH 25/65] acerhk: drop broken hardware detection

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 466 +-----------------------------------------
 1 file changed, 9 insertions(+), 457 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -78,11 +78,11 @@
 #define XSIZE     20
 
 /* Module parameters */
-static int poll = 0;
+static int poll;
 static int autowlan;
 static int wlan_state = -1;
 static int bluetooth_state = -1;
-static int verbose=1;
+static int verbose = 1;
 static unsigned int force_series;
 
 module_param(poll, int, 0444);
@@ -121,12 +121,6 @@ static unsigned int cmos_index;
 /* function for bios call */
 static bios_call call_bios;
 
-/* address of model string */
-static char *acerhk_model_addr;
-
-/* copied string, maximum length 16 ('TravelMate xxx') */
-static char acerhk_model_string[ACERHK_MODEL_STRLEN];
-
 /* travelmate series  */
 static unsigned int acerhk_series;
 
@@ -369,122 +363,6 @@ static void disable_mail_led_ec_3(void)
 
 /* }}} */
 
-/* {{{ string search functions */
-
-/* This is the Colussi algorithm, the code is taken from
-   http://www-igm.univ-mlv.fr/~lecroq/string
-*/
-int preColussi(char *x, int m, int *h, int *next, int *shift)
-{
-	int i, k, nd, q, r, s;
-	int hmax[XSIZE], kmin[XSIZE], nhd0[XSIZE], rmin[XSIZE];
-
-	/* Computation of hmax */
-	i = k = 1;
-	do {
-		while (x[i] == x[i - k])
-			i++;
-		hmax[k] = i;
-		q = k + 1;
-		while (hmax[q - k] + k < i) {
-			hmax[q] = hmax[q - k] + k;
-			q++;
-		}
-		k = q;
-		if (k == i + 1)
-			i = k;
-	} while (k <= m);
-
-	/* Computation of kmin */
-	memset(kmin, 0, m * sizeof(int));
-	r = 0;
-	for (i = m; i >= 1; --i)
-		if (hmax[i] < m)
-			kmin[hmax[i]] = i;
-
-	/* Computation of rmin */
-	for (i = m - 1; i >= 0; --i) {
-		if (hmax[i + 1] == m)
-			r = i + 1;
-		if (kmin[i] == 0)
-			rmin[i] = r;
-		else
-			rmin[i] = 0;
-	}
-
-	/* Computation of h */
-	s = -1;
-	r = m;
-	for (i = 0; i < m; ++i)
-		if (kmin[i] == 0)
-			h[--r] = i;
-		else
-			h[++s] = i;
-	nd = s;
-
-	/* Computation of shift */
-	for (i = 0; i <= nd; ++i)
-		shift[i] = kmin[h[i]];
-
-	for (i = nd + 1; i < m; ++i)
-		shift[i] = rmin[h[i]];
-
-	shift[m] = rmin[0];
-
-	/* Computation of nhd0 */
-	s = 0;
-	for (i = 0; i < m; ++i) {
-		nhd0[i] = s;
-		if (kmin[i] > 0)
-			++s;
-	}
-
-	/* Computation of next */
-	for (i = 0; i <= nd; ++i)
-		next[i] = nhd0[h[i] - kmin[h[i]]];
-
-	for (i = nd + 1; i < m; ++i)
-		next[i] = nhd0[m - rmin[h[i]]];
-	next[m] = nhd0[m - rmin[h[m - 1]]];
-
-	return nd;
-}
-
-int COLUSSI(char *x, int m, char *y, int n)
-{
-	int i, j, last, nd, h[XSIZE], next[XSIZE], shift[XSIZE];
-
-	/* Processing */
-	int match_pos;
-
-	/* position of first match */
-	nd = preColussi(x, m, h, next, shift);
-
-	/* Searching */
-	i = j = 0;
-	last = -1;
-	match_pos = -1;
-
-	while ((match_pos == -1)
-	       && (j <= n - m)) {
-		while (i < m && last < j + h[i] && x[h[i]] == y[j + h[i]])
-			i++;
-		if (i >= m || last >= j + h[i]) {
-			/* Match found, bail out */
-			match_pos = j;
-			i = m;
-		}
-		if (i > nd)
-			last = j + m - 1;
-		j += shift[i];
-		i = next[i];
-	}
-
-	return match_pos;
-}
-
-/* }}} */
-
 /* {{{ hardware access functions */
 
 /* call_bios_<model family>
@@ -1037,327 +915,14 @@ static void __init setup_model_features(
 }
 
 #ifndef __x86_64__
-static unsigned int __init determine_laptop_series(char *str)
-{
-	/* 0 means unknown series, handled like TM 200 */
-	unsigned int series = 0;
-
-	if (strncmp(str, "TravelMate ", 11) == 0) {
-		switch (str[11]) {
-		case '2':
-			if (str[14] == '0') {
-				/* newer Travelmate 2xxx series */
-				switch (str[12]) {
-				case '0':
-				case '5':
-					/* 2000 and 2500 are the same */
-					series = 2000;
-					break;
-				case '2':
-				case '7':
-					/* 2200 and 2700 are the same */
-					series = 2200;
-					break;
-				case '3':
-					if (str[13] == '0')
-						/* 2300 is the same as 4000 */
-						series = 4000;
-					else if (str[13] == '5')
-						/* 2350 is the same as 4050 */
-						series = 4050;
-					break;
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown TM 2xxx series\n");
-					break;
-				}
-			}
-			break;
-		case '3':
-			/* Travelmate 3xxx series */
-			switch (str[12]) {
-			case '0':
-				/* TM 3000 works like TM 3200 */
-				series = 3200;
-				break;
-			default:
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM 3xx series\n");
-				break;
-			}
-			break;
-		case '4':
-			/* Travelmate 4xxx series */
-			if ((strnlen(str, ACERHK_MODEL_STRLEN - 1) == 15) &&
-			    (str[14] == '0')) {
-				switch (str[12]) {
-				case '0':
-				case '5':
-					/* 4000 and 4500 are the same */
-					series = 4000;
-					break;
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown TM 4xxx series\n");
-					break;
-				}
-			} else {
-				/* Travelmate 4xx series */
-				switch (str[12]) {
-				case '2':
-					series = 420;
-					break;
-				case '3':
-					series = 430;
-					break;
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown TM 4xx series\n");
-					break;
-				}
-			}
-			break;
-		default:
-			pr_info("model string indicates unknown TM xxx series\n");
-			break;
-		}
-
-		if (series && verbose > 1)
-			pr_info("model string indicates TM %d series\n",
-				series);
-	} else if (strncmp(str, "TravelMate", 10) == 0) {
-		/* newer Travelmate series do not have a space after
-		 * 'TravelMate' */
-		switch (str[10]) {
-		case '2':
-			if (str[11] == '9') {
-				series = 290;
-			} else {
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM2xx series\n");
-			}
-			break;
-		case '3':
-			if (str[11] == '2' && str[14] == '3') {
-				/* TM 3200 uses "TravelMate32003" */
-				series = 3200;
-			} else {
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM3xxx series\n");
-			}
-			break;
-		case '4':
-			switch (str[11]) {
-			case '3':
-				series = 430;
-				break;
-			default:
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM4xx series\n");
-				break;
-			}
-			break;
-		case '5':
-			switch (str[11]) {
-			case '3':
-				series = 530;
-				break;
-			case '4':
-				series = 540;
-				break;
-			default:
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM5xx series\n");
-				break;
-			}
-			break;
-		case '6':
-			switch (str[11]) {
-			case '5':
-				series = 650;
-				break;
-			case '6':
-				series = 660;
-				break;
-			case '0':
-				if (strncmp(str, "TravelMate60003", 15) == 0) {
-					series = 6000;
-					break;
-				}
-			default:
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM6xx series\n");
-				break;
-			}
-			break;
-		case '8':
-			if (strncmp(str, "TravelMate80003", 15) == 0) {
-				series = 8000;
-			} else if (str[11] == '0') {
-				series = 800;
-			} else {
-				if (verbose > 1)
-					pr_info("model string indicates unknown TM8xx series\n");
-			}
-			break;
-		default:
-			pr_info("model string indicates unknown TMxxx series\n");
-			break;
-		}
-
-		if (series && verbose > 1)
-			pr_info("model string indicates TM%d series\n", series);
-	} else if (strncmp(str, "Aspire ", 7) == 0) {
-		switch (str[7]) {
-		case '1':
-			/* Aspire 1xxx series */
-			switch (str[8]) {
-			case '3':
-				/* Aspire 13xx series */
-				switch (str[9]) {
-				case '0':
-					series = 1300;
-					break;
-				case '1':
-					series = 1310;
-					break;
-				case '5':
-					series = 1350;
-					break;
-				case '6':
-					series = 1360;
-					break;
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown Aspire 13xx series\n");
-					break;
-				}
-				break;
-			case '4':
-				/* Aspire 14xx series */
-				switch (str[9]) {
-				case '0':
-					series = 1400;
-					break;
-				case '5':
-					series = 1450;
-					break;
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown Aspire 14xx series\n");
-					break;
-				}
-				break;
-			case '7':
-				series = 1700;
-				break;
-			case '8':
-				series = 1800;
-				break;
-			default:
-				if (verbose > 1)
-					pr_info("model string indicates unknown Aspire 1xxx series\n");
-				break;
-			}
-			break;
-		case '2':
-			/* Aspire 2xxx series */
-			if (str[8] == '0') {
-				switch (str[9]) {
-				default:
-					if (verbose > 1)
-						pr_info("model string indicates unknown Aspire 20xx series\n");
-					break;
-				case '0':
-					series = 2000;
-					break;
-				case '1':
-					series = 2010;
-					break;
-				case '2':
-					series = 2020;
-					break;
-				}
-			} else {
-				if (verbose > 1)
-					pr_info("model string indicates unknown Aspire 2xxx series\n");
-			}
-			break;
-		case '5':
-			/* Aspire 5xxx series */
-			if (str[8] == '1' && str[9] == '0') {
-				series = 5100;
-			} else {
-				if (verbose > 1)
-					pr_info("model string indicates unknown Aspire 5xxx series\n");
-			}
-		default:
-			if (verbose > 1)
-				pr_info("model string indicates unknown Aspire series\n");
-			break;
-		}
-
-		if (series && verbose > 1)
-			pr_info("model string indicates Aspire %d series\n",
-				series);
-	} else if (strncmp(str, "Extensa ", 8) == 0) {
-		/* Extensa series */
-		if (str[8] == '3' && str[9] == 0)
-			series = 3000;
-
-		if (series && verbose > 1)
-			pr_info("model string indicates Extensa %d series\n",
-				series);
-		else if (verbose > 1)
-			pr_info("model string indicates unknown Extensa series\n");
-	} else {
-		if (verbose > 1)
-			pr_info("model string indicates no supported hardware\n");
-	}
-
-	return series;
-}
-#endif
-
-#ifndef __x86_64__
 static void __init probe_model(void)
 {
-	/* offset from beginning of reg1 to Model string */
-	int offset;
+	/* XXX: replace with proper DMI parsing */
+	/* set 290 series as default */
+	acerhk_series = 290;
 
 	if (verbose)
-		pr_info("start search for model string at %p\n", reg1);
-
-	/* first we look for Travelmate, if it isn't one we try to identify
-	 * other laptops, such as Aspire */
-	offset = COLUSSI("Travel", 6, reg1, AREA_SIZE);
-
-	/* Try to detect Aspire laptops */
-	if (offset < 0)
-		offset = COLUSSI("Aspire", 6, reg1, AREA_SIZE);
-	/* Try to detect Extensa laptops */
-
-	if (offset < 0)
-		offset = COLUSSI("Extensa", 7, reg1, AREA_SIZE);
-
-	if (offset >= 0) {
-		acerhk_model_addr = reg1 + offset;
-
-		/* copy the string, but not more than 15 characters */
-		strncpy(acerhk_model_string, acerhk_model_addr,
-			ACERHK_MODEL_STRLEN - 1);
-
-		if (verbose)
-			pr_info("found model string '%s' at %p\n",
-				acerhk_model_string, acerhk_model_addr);
-
-		if (bios_routine && verbose > 2)
-			pr_info("offset from model string to function address: 0x%lx\n",
-				bios_routine -
-				(unsigned long)acerhk_model_addr);
-
-		acerhk_series = determine_laptop_series(acerhk_model_string);
-	}
+		pr_info("detected laptop series: %d\n", acerhk_series);
 }
 #endif
 
@@ -1689,7 +1254,7 @@ static int pc_proc_infos(char *buffer, i
 			 off_t *begin, off_t offset, int size)
 {
 	PRINT_PROC("Acer hotkeys\n");
-	PRINT_PROC("Model(Type)\t: %s(", acerhk_model_string);
+	PRINT_PROC("Model(Type)\t: %d(", acerhk_series);
 	PRINT_PROC("Dritek)\n");
 
 	if (bios_routine != 0) {
@@ -2157,14 +1722,7 @@ static int __devinit acerhk_probe(struct
 
 		/* attach to input system */
 		init_input();
-		memset(acerhk_model_string, 0x00, ACERHK_MODEL_STRLEN);
 #ifdef __x86_64__
-		acerhk_model_addr = (void *)0x12345678;
-
-		/* copy the string, but not more than 15 characters */
-		strncpy(acerhk_model_string, "TravelmateDummy",
-			ACERHK_MODEL_STRLEN - 1);
-
 		/* set callroutine for model */
 		if (force_series)
 			acerhk_series = force_series;
@@ -2183,13 +1741,6 @@ static int __devinit acerhk_probe(struct
 		bios_routine = find_hk_area();
 		if (!force_series)
 			probe_model();
-		else {
-			if (verbose)
-				pr_info("forced laptop series to %d\n",
-					force_series);
-
-			acerhk_series = force_series;
-		}
 
 		/* do model specific initialization */
 		model_init();
@@ -2200,7 +1751,8 @@ static int __devinit acerhk_probe(struct
 		if (verbose && bios_routine)
 			pr_info("bios routine found at 0x%x\n", bios_routine);
 
-		pr_info("Acer Travelmate hotkey driver\n");
+		pr_info("Acer Travelmate hotkey driver loaded, configured laptop series: %d\n",
+			acerhk_series);
 
 		/* If automatic switching of wlan is wanted but polling is
 		 * disabled, automatically enable it */
