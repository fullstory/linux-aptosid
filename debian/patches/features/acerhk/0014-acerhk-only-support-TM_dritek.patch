From 2c09a28eeda058c9ec958c8a9d724ef04b590d7d Mon Sep 17 00:00:00 2001
From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Mon, 1 Jul 2013 02:25:40 +0200
Subject: [PATCH 14/65] acerhk: only support TM_dritek

This drops support for the Aspire 1680/1690 and TravelMate 4100/4600,
because its keys are controlled by the normal keyboard controller.

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 drivers/platform/x86/acerhk.c | 253 ++++++++++--------------------------------
 drivers/platform/x86/acerhk.h |  11 --
 2 files changed, 56 insertions(+), 208 deletions(-)

--- a/drivers/platform/x86/acerhk.c
+++ b/drivers/platform/x86/acerhk.c
@@ -79,14 +79,12 @@
 /* Module parameters */
 static int poll = 1;
 static int autowlan;
-static int usedritek = 1;
 static int wlan_state = -1;
 static int bluetooth_state = -1;
 static int verbose;
 static unsigned int force_series;
 module_param(poll, int, 0444);
 module_param(autowlan, int, 0444);
-module_param(usedritek, int, 0444);
 module_param(verbose, int, 0444);
 module_param(wlan_state, int, 0444);
 module_param(bluetooth_state, int, 0444);
@@ -96,7 +94,6 @@ MODULE_PARM_DESC(autowlan, "automatic sw
 MODULE_PARM_DESC(wlan_state, "(assumed) initial state of WLAN LED/hardware");
 MODULE_PARM_DESC(bluetooth_state,
 		 "(assumed) initial state of Bluetooth LED/hardware");
-MODULE_PARM_DESC(usedritek, "enable dritek keyboard extension");
 MODULE_PARM_DESC(verbose, "output additional information");
 MODULE_PARM_DESC(force_series, "force laptop series, skip autodetection");
 
@@ -120,8 +117,6 @@ static bios_call call_bios;
 static char *acerhk_model_addr;
 /* copied string, maximum length 16 ('TravelMate xxx') */
 static char acerhk_model_string[ACERHK_MODEL_STRLEN];
-/* type of hardware access  */
-static t_acer_type acerhk_type;
 /* travelmate series  */
 static unsigned int acerhk_series;
 /* supported features for this model */
@@ -192,20 +187,12 @@ static int my_i8042_wait_write(void)
 
 static void send_kbd_cmd(unsigned char cmd, unsigned char val)
 {
-	if (usedritek) {
-		preempt_disable();
-		if (!my_i8042_wait_write())
-			outb(cmd, KBD_CNTL_REG);
-		if (!my_i8042_wait_write())
-			outb(val, KBD_DATA_REG);
-		preempt_enable_no_resched();
-	} else {
-		printk(KERN_INFO "acerhk: request for accessing EC ignored\n"
-		       KERN_INFO
-		       "acerhk: Use of dritek keyboard extension not enabled, use module\n"
-		       KERN_INFO
-		       "acerhk: parameter usedritek=1 to do that (possibly dangerous)\n");
-	}
+	preempt_disable();
+	if (!my_i8042_wait_write())
+		outb(cmd, KBD_CNTL_REG);
+	if (!my_i8042_wait_write())
+		outb(val, KBD_DATA_REG);
+	preempt_enable_no_resched();
 }
 
 static void enable_wlan_ec_1(void)
@@ -329,14 +316,12 @@ static void enable_mail_led_ec_3(void)
 	if (verbose)
 		printk(KERN_INFO
 		       "acerhk:  enabling mail led via EC variant 3\n");
-	if (usedritek) {
-		preempt_disable();
-		if (!my_i8042_wait_write())
-			outl(0x80008894, 0xCF8);
-		if (!my_i8042_wait_write())
-			outw(0xC061, 0xCFC);
-		preempt_enable_no_resched();
-	}
+	preempt_disable();
+	if (!my_i8042_wait_write())
+		outl(0x80008894, 0xCF8);
+	if (!my_i8042_wait_write())
+		outw(0xC061, 0xCFC);
+	preempt_enable_no_resched();
 }
 
 static void disable_mail_led_ec_3(void)
@@ -344,14 +329,12 @@ static void disable_mail_led_ec_3(void)
 	if (verbose)
 		printk(KERN_INFO
 		       "acerhk:  disabling mail led via EC variant 3\n");
-	if (usedritek) {
-		preempt_disable();
-		if (!my_i8042_wait_write())
-			outl(0x80008894, 0xCF8);
-		if (!my_i8042_wait_write())
-			outw(0xC060, 0xCFC);
-		preempt_enable_no_resched();
-	}
+	preempt_disable();
+	if (!my_i8042_wait_write())
+		outl(0x80008894, 0xCF8);
+	if (!my_i8042_wait_write())
+		outw(0xC060, 0xCFC);
+	preempt_enable_no_resched();
 }
 
 /* }}} */
@@ -487,38 +470,6 @@ static asmlinkage void call_bios_6xx(str
 #endif
 }
 
-static asmlinkage void call_bios_52x(struct register_buffer *buf)
-{
-#ifndef __x86_64__
-	if (bios_routine) {
-		local_irq_disable();
-		__asm__ __volatile__("movl %2,%%edx\n\t"
-				     "pusha\n\t"
-				     "movl %%edx,%%ebp\n\t"
-				     "movl (%%ebp),%%eax\n\t"
-				     "movl 4(%%ebp),%%ebx\n\t"
-				     "movl 8(%%ebp),%%ecx\n\t"
-				     "movl 12(%%ebp),%%edx\n\t"
-				     "movl 16(%%ebp),%%edi\n\t"
-				     "movl 20(%%ebp),%%esi\n\t"
-				     "pushl %%ebp\n\t"
-				     "movl %1, %%ebp\n\t"
-				     "call *%0\n\t"
-				     "popl %%ebp\n\t"
-				     "movl %%eax, (%%ebp)\n\t"
-				     "movl %%ebx, 4(%%ebp)\n\t"
-				     "movl %%ecx, 8(%%ebp)\n\t"
-				     "movl %%edx, 12(%%ebp)\n\t"
-				     "movl %%edi, 16(%%ebp)\n\t"
-				     "movl %%esi, 20(%%ebp)\n\t"
-				     "popa\n\t"::"m"(bios_routine),
-				     :"%eax", "%ebx", "%ecx", "%edx", "%edi",
-				     "%esi", "%ebp");
-		local_irq_enable();
-	}
-#endif
-}
-
 #define PRINT_BUFFER(x) \
   printk(KERN_INFO"acerhk: eax=0x%x ebx=0x%x ecx=0x%x edx=0x%x\n" \
 		 "acerhk: edi=0x%x esi=0x%x ebp=0x%x\n", \
@@ -922,13 +873,9 @@ static void __init setup_keymap_model(un
 	case 4050:
 	case 6000:
 	case 8000:
-	case 4100:
 	case 4150:
 	case 4500:
-	case 4600:
 	case 4650:
-	case 1680:
-	case 1690:
 		/* keys are handled by dritek EC */
 		acerhk_key2name[1] = k_none;
 		acerhk_key2name[2] = k_none;
@@ -976,7 +923,6 @@ static void __init setup_model_features(
 	case 290:
 		/* no special functions, wireless hardware controlled by EC */
 		acerhk_model_features = TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
-		acerhk_type = TM_dritek;
 		break;
 	case 650:
 	case 1300:
@@ -985,68 +931,48 @@ static void __init setup_model_features(
 	case 1700:
 		/* all special functions, wireless hardware can be controlled */
 		acerhk_model_features = 0x00f00000;
-		acerhk_type = TM_dritek;
-		break;
-	case 4100:
-	case 4600:
-	case 1680:
-	case 1690:		/* Aspire 1680/1690 should be similar to TM 4100/4600 */
-		/* mail led, wireless and bluetooth controlled the old way, but keys are
-		   controlled by normal keyboard controller, so mark as dritek and
-		   deactivate dritek use */
-		acerhk_model_features = TM_F_MAIL_LED | TM_F_WBUTTON;
-		acerhk_type = TM_dritek;
-		usedritek = 0;
 		break;
 	case 660:
 	case 800:
 		/* all special functions, mail led */
 		acerhk_model_features = TM_F_MAIL_LED | 0x00f00000;
-		acerhk_type = TM_dritek;
 		break;
 	case 1350:
 	case 1360:
 		/* mail led, handled by EC, wireless HW is not (yet) controllable ? */
 		acerhk_model_features = TM_F_MAIL_LED_EC | TM_F_WLAN_EC1;
-		acerhk_type = TM_dritek;
 		break;
 	case 1450:
 		/* Bluetooth/Wlan led, Mail led handled by EC (variant 3) */
 		acerhk_model_features = TM_F_MAIL_LED_EC3 | TM_F_WBUTTON;
-		acerhk_type = TM_dritek;
 		break;
 	case 420:
 	case 430:
 		/* all functions and dritek EC, mail LED is handled by EC, second
 		   variant. An additional led is available, mute. (really?)
 		 */
-		acerhk_type = TM_dritek;
 		acerhk_model_features = TM_F_MUTE_LED_EC | TM_F_MAIL_LED_EC2;
 		break;
 	case 2300:
 	case 4000:
 	case 4500:
 		/* wireless hardware, hopefully under control of my driver */
-		acerhk_type = TM_dritek;
 		acerhk_model_features = TM_F_BLUE_EC1 | TM_F_WLAN_EC1;
 		break;
 	case 3200:
 		/* test, if this model uses old style wlan control */
 		acerhk_model_features = TM_F_WBUTTON;
-		acerhk_type = TM_dritek;
 		break;
 	case 6000:
 	case 8000:
 		/* 6000 and 8000 have wireless hardware, but I don't know how to handle,
 		   so I choose no features */
-		acerhk_type = TM_dritek;
 		break;
 	case 530:
 	case 540:
 	case 2000:
 		/* No features (?) dritek EC, mail LED is handled by EC but
 		   different from other Aspire series */
-		acerhk_type = TM_dritek;
 		acerhk_model_features = TM_F_MAIL_LED_EC2;
 		break;
 	case 4150:
@@ -1054,7 +980,6 @@ static void __init setup_model_features(
 		/* Dritek EC, bluetooth, wifi, mail */
 		/* According to Andreas Stumpfl his TM 4652LMi does also work as series
 		   3200, which might mean that the BIOS function accesses the EC */
-		acerhk_type = TM_dritek;
 		acerhk_model_features =
 		    TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
 		break;
@@ -1063,7 +988,6 @@ static void __init setup_model_features(
 	case 2020:
 	case 5100:
 		/* Dritek EC, bluetooth, wifi, mail */
-		acerhk_type = TM_dritek;
 		acerhk_model_features =
 		    TM_F_MAIL_LED_EC2 | TM_F_WLAN_EC2 | TM_F_BLUE_EC2;
 		acerhk_wlan_state = 1;	// Default state is on
@@ -1071,23 +995,16 @@ static void __init setup_model_features(
 	default:
 		/* nothing special */
 		acerhk_model_features = 0;
-		acerhk_type = TM_unknown;
 		break;
 	}
 	/* set the correct bios call function according to type */
-	if (acerhk_type == TM_dritek) {
-		call_bios = call_bios_6xx;
-		if (verbose > 2)
-			printk(KERN_INFO "acerhk: using call_bios_6xx mode\n");
-	} else {
-		call_bios = call_bios_52x;
-		if (verbose > 2)
-			printk(KERN_INFO "acerhk: using call_bios_52x mode\n");
-	}
+	call_bios = call_bios_6xx;
+	if (verbose > 2)
+		printk(KERN_INFO "acerhk: using call_bios_6xx mode\n");
+
 	/* remove key file on dritek hardware */
-	if (acerhk_type == TM_dritek) {
-		remove_proc_entry("key", proc_acer_dir);
-	}
+	remove_proc_entry("key", proc_acer_dir);
+
 	/* setup available keys */
 	setup_keymap_model(acerhk_series);
 	if (verbose > 1)
@@ -1147,10 +1064,6 @@ static unsigned int __init determine_lap
 				case '5':
 					series = 4000;
 					break;
-				case '1':
-				case '6':	/* 4100 and 4600 are the same */
-					series = 4100;
-					break;
 				default:
 					if (verbose > 1)
 						printk(KERN_INFO
@@ -1321,19 +1234,6 @@ static unsigned int __init determine_lap
 					break;
 				}
 				break;
-			case '6':	/* Aspire 14xx series */
-				switch (str[9]) {
-				case '8':
-				case '9':
-					series = 1680;
-					break;
-				default:
-					if (verbose > 1)
-						printk(KERN_INFO
-						       "acerhk: model string indicates unknown Aspire 16xx series\n");
-					break;
-				}
-				break;
 			case '7':
 				series = 1700;
 				break;
@@ -1443,7 +1343,6 @@ static unsigned int __init determine_lap
 				       "acerhk: model string indicates unknown FS Amilo XX series\n");
 		}
 	} else if (strncmp(str, "MEDIONPC", 8) == 0) {
-		uint medionmodel;
 		if (verbose > 1)
 			printk(KERN_INFO
 			       "acerhk: model string indicates a medion MD %d\n",
@@ -1601,6 +1500,7 @@ static void init_keymap_input(void)
 		print_mapping();
 }
 
+#if !(defined(DUMMYHW) || defined(__x86_64__))
 static int filter_idle_value(int keycode)
 {
 	int validkey = 0;
@@ -1613,6 +1513,7 @@ static int filter_idle_value(int keycode
 		       keycode);
 	return validkey;
 }
+#endif
 
 #if !(defined(DUMMYHW) || defined(__x86_64__))
 static void send_key_event(t_key_names key)
@@ -1691,13 +1592,7 @@ static void acerhk_poll_event(unsigned l
 	/* make sure not to loop more then 32 times */
 	if (!max || max > 32)
 		max = 32;
-	if (acerhk_type != TM_dritek) {
-		while (get_nr_events() && max--) {
-			send_key_event(transl8_key_code(get_fnkey_event()));
-		}
-	} else {
-		send_key_event(transl8_key_code(get_fnkey_event()));
-	}
+	send_key_event(transl8_key_code(get_fnkey_event()));
 #endif
 	acerhk_timer_poll.expires = jiffies + acerhk_polling_delay;
 	add_timer(&acerhk_timer_poll);
@@ -1771,12 +1666,11 @@ static void start_polling(void)
 		acerhk_timer_poll.data = get_nr_events();
 		add_timer(&acerhk_timer_poll);
 		acerhk_polling_state = 1;
-		if (acerhk_type == TM_dritek) {
-			printk(KERN_INFO
-			       "acerhk: Your hardware does not need polling enabled for hotkeys to work, "
-			       "you can safely disable polling by using the module parameter poll=0 (unless you "
-			       "want to play around with the driver and see if there are buttons which need polling).\n");
-		}
+		printk(KERN_INFO
+		       "acerhk: Your hardware does not need polling enabled for hotkeys to work, "
+		       "you can safely disable polling by using the module parameter poll=0 (unless you "
+		       "want to play around with the driver and see if there are buttons which need polling).\n");
+
 		if (verbose)
 			printk(KERN_INFO
 			       "acerhk: starting key polling, every %d ms\n",
@@ -1849,14 +1743,7 @@ static int pc_proc_infos(char *buffer, i
 {
 	PRINT_PROC("Acer hotkeys version %s\n", ACERHK_VERSION);
 	PRINT_PROC("Model(Type)\t: %s(", acerhk_model_string);
-	switch (acerhk_type) {
-	default:
-		PRINT_PROC("unknown)\n");
-		break;
-	case TM_dritek:
-		PRINT_PROC("Dritek)\n");
-		break;
-	}
+	PRINT_PROC("Dritek)\n");
 	if (bios_routine != 0) {
 		PRINT_PROC("request handler\t: 0x%x\n", bios_routine);
 		if (cmos_index) {
@@ -1879,13 +1766,8 @@ static int pc_proc_infos(char *buffer, i
 		PRINT_PROC("kernel polling\t: not possible\n");
 	}
 	/* model specific infos */
-	if (acerhk_type == TM_dritek) {
-		PRINT_PROC("use of Dritek EC: ");
-		if (usedritek)
-			PRINT_PROC("enabled\n");
-		else
-			PRINT_PROC("disabled\n");
-	}
+	PRINT_PROC("use of Dritek EC: ");
+	PRINT_PROC("enabled\n");
 	return (1);
 }
 
@@ -1908,12 +1790,7 @@ static int acerhk_proc_key(char *buffer,
 			   int size, int *eof, void *data)
 {
 	if (size >= 5 && offset == 0) {
-		if (acerhk_type == TM_dritek || acerhk_polling_state == 1) {
-			snprintf(buffer + offset, size, "n/a\n");
-		} else {
-			snprintf(buffer + offset, size, "0x%02x\n",
-				 filter_idle_value(get_fnkey_event()));
-		}
+		snprintf(buffer + offset, size, "n/a\n");
 		*eof = 1;
 		return 5;
 	}
@@ -2142,8 +2019,6 @@ static void acerhk_proc_cleanup(void)
 	if (proc_acer_dir) {
 		remove_proc_entry("info", proc_acer_dir);
 		/* On dritek type hardware key file is already removed */
-		if (acerhk_type != TM_dritek)
-			remove_proc_entry("key", proc_acer_dir);
 		remove_proc_entry("led", proc_acer_dir);
 		remove_proc_entry("wirelessled", proc_acer_dir);
 		remove_proc_entry("blueled", proc_acer_dir);
@@ -2294,16 +2169,10 @@ static void __devinit model_init(void)
 	if (acerhk_model_features & TM_F_CONNECT) {
 		if (verbose)
 			printk(KERN_INFO
-			       "acerhk: Model type %d, calling launch_connect(1)\n",
-			       acerhk_type);
+			       "acerhk: Model type dritek, calling launch_connect(1)\n");
 		launch_connect(1);
 	}
-	if (acerhk_type != TM_dritek) {
-		get_cmos_index();
-	}
-	if (acerhk_type == TM_dritek) {
-		enable_dritek_keyboard();
-	}
+	enable_dritek_keyboard();
 	/* added by Antonio Cuni */
 	init_timer(&acerhk_timer_blinking);
 }
@@ -2352,8 +2221,7 @@ static int __devinit acerhk_probe(struct
 		setup_model_features(acerhk_series);
 		printk(KERN_INFO "Acer Travelmate hotkey driver v"
 		       ACERHK_VERSION " dummy\n");
-		if (acerhk_type == TM_dritek)
-			enable_dritek_keyboard();
+		enable_dritek_keyboard();
 		if (poll)
 			start_polling();
 		init_timer(&acerhk_timer_blinking);
@@ -2372,30 +2240,23 @@ static int __devinit acerhk_probe(struct
 		model_init();
 		/* Without a bios routine we cannot do anything except on dritek
 		   type HW, unload on other types */
-		if (bios_routine || (acerhk_type == TM_dritek)) {
-			ret = 0;
-			if (verbose && bios_routine)
-				printk(KERN_INFO
-				       "acerhk: bios routine found at 0x%x\n",
-				       bios_routine);
-			printk(KERN_INFO "Acer Travelmate hotkey driver v"
-			       ACERHK_VERSION "\n");
-			/* If automatic switching of wlan is wanted but polling is disabled,
-			   automatically enable it */
-			if (!poll && autowlan) {
-				printk(KERN_INFO
-				       "Automatic switching of wireless hardware needs polling, enabling it\n");
-				poll = 1;
-			}
-			/* start automatic polling of key presses if wanted and bios routine found */
-			if (poll && bios_routine)
-				start_polling();
-		} else {
-			printk(KERN_ERR
-			       "acerhk: can't find bios routine, cannot do anything for you, sorry!\n");
-			ret = -ENOMEM;
-			return acerhk_remove(dev);
+		ret = 0;
+		if (verbose && bios_routine)
+			printk(KERN_INFO
+			       "acerhk: bios routine found at 0x%x\n",
+			       bios_routine);
+		printk(KERN_INFO "Acer Travelmate hotkey driver v"
+		       ACERHK_VERSION "\n");
+		/* If automatic switching of wlan is wanted but polling is disabled,
+		   automatically enable it */
+		if (!poll && autowlan) {
+			printk(KERN_INFO
+			       "Automatic switching of wireless hardware needs polling, enabling it\n");
+			poll = 1;
 		}
+		/* start automatic polling of key presses if wanted and bios routine found */
+		if (poll && bios_routine)
+			start_polling();
 #endif
 	}
 	return ret;
@@ -2411,9 +2272,7 @@ static int __devexit acerhk_remove(struc
 		iounmap(reg2);
 	release_input();
 	misc_deregister(&acerhk_misc_dev);
-	if (acerhk_type == TM_dritek) {
-		disable_dritek_keyboard();
-	}
+	disable_dritek_keyboard();
 	if (verbose > 2)
 		printk(KERN_INFO "acerhk: unloaded\n");
 
--- a/drivers/platform/x86/acerhk.h
+++ b/drivers/platform/x86/acerhk.h
@@ -63,17 +63,6 @@ typedef unsigned int t_map_name2event[NR
 #define TM_F_PBUTTON      0x00400000
 #define TM_F_WBUTTON      0x00800000
 
-typedef enum acer_type {
-	TM_unknown,
-	/* 200, 210, 520, 600 and 730 series, Medion MD42200 */
-	TM_old,
-	/* C100, C110, 220, 230, 240, 260, 350, 360, 610, 620, 630, 740 series
-	   Medion MD40100, Aspire 1600, FS Amilo */
-	TM_new,
-	/* Aspire 13xx, 14xx, 1700, TM 290, 650, 660, 800 */
-	TM_dritek
-} t_acer_type;
-
 struct register_buffer {
 	unsigned int eax;
 	unsigned int ebx;
